// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package projections is a generated GoMock package.
package projections

import (
	context "context"
	reflect "reflect"

	connection "github.com/EventStore/EventStore-Client-Go/connection"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AbortProjection mocks base method.
func (m *MockClient) AbortProjection(ctx context.Context, handle connection.ConnectionHandle, options AbortOptionsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortProjection", ctx, handle, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortProjection indicates an expected call of AbortProjection.
func (mr *MockClientMockRecorder) AbortProjection(ctx, handle, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortProjection", reflect.TypeOf((*MockClient)(nil).AbortProjection), ctx, handle, options)
}

// CreateProjection mocks base method.
func (m *MockClient) CreateProjection(ctx context.Context, handle connection.ConnectionHandle, options CreateOptionsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjection", ctx, handle, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProjection indicates an expected call of CreateProjection.
func (mr *MockClientMockRecorder) CreateProjection(ctx, handle, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjection", reflect.TypeOf((*MockClient)(nil).CreateProjection), ctx, handle, options)
}

// DeleteProjection mocks base method.
func (m *MockClient) DeleteProjection(ctx context.Context, handle connection.ConnectionHandle, options DeleteOptionsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjection", ctx, handle, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjection indicates an expected call of DeleteProjection.
func (mr *MockClientMockRecorder) DeleteProjection(ctx, handle, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjection", reflect.TypeOf((*MockClient)(nil).DeleteProjection), ctx, handle, options)
}

// DisableProjection mocks base method.
func (m *MockClient) DisableProjection(ctx context.Context, handle connection.ConnectionHandle, options DisableOptionsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableProjection", ctx, handle, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableProjection indicates an expected call of DisableProjection.
func (mr *MockClientMockRecorder) DisableProjection(ctx, handle, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableProjection", reflect.TypeOf((*MockClient)(nil).DisableProjection), ctx, handle, options)
}

// EnableProjection mocks base method.
func (m *MockClient) EnableProjection(ctx context.Context, handle connection.ConnectionHandle, options EnableOptionsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableProjection", ctx, handle, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableProjection indicates an expected call of EnableProjection.
func (mr *MockClientMockRecorder) EnableProjection(ctx, handle, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableProjection", reflect.TypeOf((*MockClient)(nil).EnableProjection), ctx, handle, options)
}

// GetProjectionResult mocks base method.
func (m *MockClient) GetProjectionResult(ctx context.Context, handle connection.ConnectionHandle, options ResultOptionsRequest) (ResultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectionResult", ctx, handle, options)
	ret0, _ := ret[0].(ResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectionResult indicates an expected call of GetProjectionResult.
func (mr *MockClientMockRecorder) GetProjectionResult(ctx, handle, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectionResult", reflect.TypeOf((*MockClient)(nil).GetProjectionResult), ctx, handle, options)
}

// GetProjectionState mocks base method.
func (m *MockClient) GetProjectionState(ctx context.Context, handle connection.ConnectionHandle, options StateOptionsRequest) (StateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectionState", ctx, handle, options)
	ret0, _ := ret[0].(StateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectionState indicates an expected call of GetProjectionState.
func (mr *MockClientMockRecorder) GetProjectionState(ctx, handle, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectionState", reflect.TypeOf((*MockClient)(nil).GetProjectionState), ctx, handle, options)
}

// GetProjectionStatistics mocks base method.
func (m *MockClient) GetProjectionStatistics(ctx context.Context, handle connection.ConnectionHandle, options StatisticsOptionsRequest) (StatisticsClientSync, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectionStatistics", ctx, handle, options)
	ret0, _ := ret[0].(StatisticsClientSync)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectionStatistics indicates an expected call of GetProjectionStatistics.
func (mr *MockClientMockRecorder) GetProjectionStatistics(ctx, handle, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectionStatistics", reflect.TypeOf((*MockClient)(nil).GetProjectionStatistics), ctx, handle, options)
}

// ListAllProjections mocks base method.
func (m *MockClient) ListAllProjections(ctx context.Context, handle connection.ConnectionHandle) ([]StatisticsClientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllProjections", ctx, handle)
	ret0, _ := ret[0].([]StatisticsClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllProjections indicates an expected call of ListAllProjections.
func (mr *MockClientMockRecorder) ListAllProjections(ctx, handle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllProjections", reflect.TypeOf((*MockClient)(nil).ListAllProjections), ctx, handle)
}

// ListContinuousProjections mocks base method.
func (m *MockClient) ListContinuousProjections(ctx context.Context, handle connection.ConnectionHandle) ([]StatisticsClientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContinuousProjections", ctx, handle)
	ret0, _ := ret[0].([]StatisticsClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContinuousProjections indicates an expected call of ListContinuousProjections.
func (mr *MockClientMockRecorder) ListContinuousProjections(ctx, handle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContinuousProjections", reflect.TypeOf((*MockClient)(nil).ListContinuousProjections), ctx, handle)
}

// ListOneTimeProjections mocks base method.
func (m *MockClient) ListOneTimeProjections(ctx context.Context, handle connection.ConnectionHandle) ([]StatisticsClientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOneTimeProjections", ctx, handle)
	ret0, _ := ret[0].([]StatisticsClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOneTimeProjections indicates an expected call of ListOneTimeProjections.
func (mr *MockClientMockRecorder) ListOneTimeProjections(ctx, handle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOneTimeProjections", reflect.TypeOf((*MockClient)(nil).ListOneTimeProjections), ctx, handle)
}

// ResetProjection mocks base method.
func (m *MockClient) ResetProjection(ctx context.Context, handle connection.ConnectionHandle, options ResetOptionsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetProjection", ctx, handle, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetProjection indicates an expected call of ResetProjection.
func (mr *MockClientMockRecorder) ResetProjection(ctx, handle, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetProjection", reflect.TypeOf((*MockClient)(nil).ResetProjection), ctx, handle, options)
}

// RestartProjectionsSubsystem mocks base method.
func (m *MockClient) RestartProjectionsSubsystem(ctx context.Context, handle connection.ConnectionHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartProjectionsSubsystem", ctx, handle)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartProjectionsSubsystem indicates an expected call of RestartProjectionsSubsystem.
func (mr *MockClientMockRecorder) RestartProjectionsSubsystem(ctx, handle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartProjectionsSubsystem", reflect.TypeOf((*MockClient)(nil).RestartProjectionsSubsystem), ctx, handle)
}

// UpdateProjection mocks base method.
func (m *MockClient) UpdateProjection(ctx context.Context, handle connection.ConnectionHandle, options UpdateOptionsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjection", ctx, handle, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjection indicates an expected call of UpdateProjection.
func (mr *MockClientMockRecorder) UpdateProjection(ctx, handle, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjection", reflect.TypeOf((*MockClient)(nil).UpdateProjection), ctx, handle, options)
}
