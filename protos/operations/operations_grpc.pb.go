// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package operations

import (
	context "context"
	shared "github.com/pivonroll/EventStore-Client-Go/protos/shared"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperationsClient is the client API for Operations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperationsClient interface {
	StartScavenge(ctx context.Context, in *StartScavengeReq, opts ...grpc.CallOption) (*ScavengeResp, error)
	StopScavenge(ctx context.Context, in *StopScavengeReq, opts ...grpc.CallOption) (*ScavengeResp, error)
	Shutdown(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error)
	MergeIndexes(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error)
	ResignNode(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error)
	SetNodePriority(ctx context.Context, in *SetNodePriorityReq, opts ...grpc.CallOption) (*shared.Empty, error)
	RestartPersistentSubscriptions(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error)
}

type operationsClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationsClient(cc grpc.ClientConnInterface) OperationsClient {
	return &operationsClient{cc}
}

func (c *operationsClient) StartScavenge(ctx context.Context, in *StartScavengeReq, opts ...grpc.CallOption) (*ScavengeResp, error) {
	out := new(ScavengeResp)
	err := c.cc.Invoke(ctx, "/event_store.client.operations.Operations/StartScavenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) StopScavenge(ctx context.Context, in *StopScavengeReq, opts ...grpc.CallOption) (*ScavengeResp, error) {
	out := new(ScavengeResp)
	err := c.cc.Invoke(ctx, "/event_store.client.operations.Operations/StopScavenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) Shutdown(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error) {
	out := new(shared.Empty)
	err := c.cc.Invoke(ctx, "/event_store.client.operations.Operations/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) MergeIndexes(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error) {
	out := new(shared.Empty)
	err := c.cc.Invoke(ctx, "/event_store.client.operations.Operations/MergeIndexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) ResignNode(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error) {
	out := new(shared.Empty)
	err := c.cc.Invoke(ctx, "/event_store.client.operations.Operations/ResignNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) SetNodePriority(ctx context.Context, in *SetNodePriorityReq, opts ...grpc.CallOption) (*shared.Empty, error) {
	out := new(shared.Empty)
	err := c.cc.Invoke(ctx, "/event_store.client.operations.Operations/SetNodePriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) RestartPersistentSubscriptions(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error) {
	out := new(shared.Empty)
	err := c.cc.Invoke(ctx, "/event_store.client.operations.Operations/RestartPersistentSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationsServer is the server API for Operations service.
// All implementations must embed UnimplementedOperationsServer
// for forward compatibility
type OperationsServer interface {
	StartScavenge(context.Context, *StartScavengeReq) (*ScavengeResp, error)
	StopScavenge(context.Context, *StopScavengeReq) (*ScavengeResp, error)
	Shutdown(context.Context, *shared.Empty) (*shared.Empty, error)
	MergeIndexes(context.Context, *shared.Empty) (*shared.Empty, error)
	ResignNode(context.Context, *shared.Empty) (*shared.Empty, error)
	SetNodePriority(context.Context, *SetNodePriorityReq) (*shared.Empty, error)
	RestartPersistentSubscriptions(context.Context, *shared.Empty) (*shared.Empty, error)
	mustEmbedUnimplementedOperationsServer()
}

// UnimplementedOperationsServer must be embedded to have forward compatible implementations.
type UnimplementedOperationsServer struct {
}

func (UnimplementedOperationsServer) StartScavenge(context.Context, *StartScavengeReq) (*ScavengeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScavenge not implemented")
}
func (UnimplementedOperationsServer) StopScavenge(context.Context, *StopScavengeReq) (*ScavengeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopScavenge not implemented")
}
func (UnimplementedOperationsServer) Shutdown(context.Context, *shared.Empty) (*shared.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedOperationsServer) MergeIndexes(context.Context, *shared.Empty) (*shared.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeIndexes not implemented")
}
func (UnimplementedOperationsServer) ResignNode(context.Context, *shared.Empty) (*shared.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResignNode not implemented")
}
func (UnimplementedOperationsServer) SetNodePriority(context.Context, *SetNodePriorityReq) (*shared.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodePriority not implemented")
}
func (UnimplementedOperationsServer) RestartPersistentSubscriptions(context.Context, *shared.Empty) (*shared.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartPersistentSubscriptions not implemented")
}
func (UnimplementedOperationsServer) mustEmbedUnimplementedOperationsServer() {}

// UnsafeOperationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationsServer will
// result in compilation errors.
type UnsafeOperationsServer interface {
	mustEmbedUnimplementedOperationsServer()
}

func RegisterOperationsServer(s grpc.ServiceRegistrar, srv OperationsServer) {
	s.RegisterService(&Operations_ServiceDesc, srv)
}

func _Operations_StartScavenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartScavengeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).StartScavenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_store.client.operations.Operations/StartScavenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).StartScavenge(ctx, req.(*StartScavengeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operations_StopScavenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopScavengeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).StopScavenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_store.client.operations.Operations/StopScavenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).StopScavenge(ctx, req.(*StopScavengeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operations_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_store.client.operations.Operations/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).Shutdown(ctx, req.(*shared.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operations_MergeIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).MergeIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_store.client.operations.Operations/MergeIndexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).MergeIndexes(ctx, req.(*shared.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operations_ResignNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).ResignNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_store.client.operations.Operations/ResignNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).ResignNode(ctx, req.(*shared.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operations_SetNodePriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodePriorityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).SetNodePriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_store.client.operations.Operations/SetNodePriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).SetNodePriority(ctx, req.(*SetNodePriorityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operations_RestartPersistentSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).RestartPersistentSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_store.client.operations.Operations/RestartPersistentSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).RestartPersistentSubscriptions(ctx, req.(*shared.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Operations_ServiceDesc is the grpc.ServiceDesc for Operations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Operations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event_store.client.operations.Operations",
	HandlerType: (*OperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartScavenge",
			Handler:    _Operations_StartScavenge_Handler,
		},
		{
			MethodName: "StopScavenge",
			Handler:    _Operations_StopScavenge_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Operations_Shutdown_Handler,
		},
		{
			MethodName: "MergeIndexes",
			Handler:    _Operations_MergeIndexes_Handler,
		},
		{
			MethodName: "ResignNode",
			Handler:    _Operations_ResignNode_Handler,
		},
		{
			MethodName: "SetNodePriority",
			Handler:    _Operations_SetNodePriority_Handler,
		},
		{
			MethodName: "RestartPersistentSubscriptions",
			Handler:    _Operations_RestartPersistentSubscriptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operations.proto",
}
