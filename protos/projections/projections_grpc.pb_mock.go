// Code generated by MockGen. DO NOT EDIT.
// Source: projections_grpc.pb.go

// Package projections is a generated GoMock package.
package projections

import (
	context "context"
	reflect "reflect"

	shared "github.com/EventStore/EventStore-Client-Go/protos/shared"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockProjectionsClient is a mock of ProjectionsClient interface.
type MockProjectionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectionsClientMockRecorder
}

// MockProjectionsClientMockRecorder is the mock recorder for MockProjectionsClient.
type MockProjectionsClientMockRecorder struct {
	mock *MockProjectionsClient
}

// NewMockProjectionsClient creates a new mock instance.
func NewMockProjectionsClient(ctrl *gomock.Controller) *MockProjectionsClient {
	mock := &MockProjectionsClient{ctrl: ctrl}
	mock.recorder = &MockProjectionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectionsClient) EXPECT() *MockProjectionsClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProjectionsClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*CreateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProjectionsClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectionsClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockProjectionsClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*DeleteResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectionsClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectionsClient)(nil).Delete), varargs...)
}

// Disable mocks base method.
func (m *MockProjectionsClient) Disable(ctx context.Context, in *DisableReq, opts ...grpc.CallOption) (*DisableResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Disable", varargs...)
	ret0, _ := ret[0].(*DisableResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockProjectionsClientMockRecorder) Disable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockProjectionsClient)(nil).Disable), varargs...)
}

// Enable mocks base method.
func (m *MockProjectionsClient) Enable(ctx context.Context, in *EnableReq, opts ...grpc.CallOption) (*EnableResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enable", varargs...)
	ret0, _ := ret[0].(*EnableResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enable indicates an expected call of Enable.
func (mr *MockProjectionsClientMockRecorder) Enable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockProjectionsClient)(nil).Enable), varargs...)
}

// Reset mocks base method.
func (m *MockProjectionsClient) Reset(ctx context.Context, in *ResetReq, opts ...grpc.CallOption) (*ResetResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reset", varargs...)
	ret0, _ := ret[0].(*ResetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *MockProjectionsClientMockRecorder) Reset(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockProjectionsClient)(nil).Reset), varargs...)
}

// RestartSubsystem mocks base method.
func (m *MockProjectionsClient) RestartSubsystem(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartSubsystem", varargs...)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartSubsystem indicates an expected call of RestartSubsystem.
func (mr *MockProjectionsClientMockRecorder) RestartSubsystem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartSubsystem", reflect.TypeOf((*MockProjectionsClient)(nil).RestartSubsystem), varargs...)
}

// Result mocks base method.
func (m *MockProjectionsClient) Result(ctx context.Context, in *ResultReq, opts ...grpc.CallOption) (*ResultResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Result", varargs...)
	ret0, _ := ret[0].(*ResultResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockProjectionsClientMockRecorder) Result(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockProjectionsClient)(nil).Result), varargs...)
}

// State mocks base method.
func (m *MockProjectionsClient) State(ctx context.Context, in *StateReq, opts ...grpc.CallOption) (*StateResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "State", varargs...)
	ret0, _ := ret[0].(*StateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockProjectionsClientMockRecorder) State(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockProjectionsClient)(nil).State), varargs...)
}

// Statistics mocks base method.
func (m *MockProjectionsClient) Statistics(ctx context.Context, in *StatisticsReq, opts ...grpc.CallOption) (Projections_StatisticsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Statistics", varargs...)
	ret0, _ := ret[0].(Projections_StatisticsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockProjectionsClientMockRecorder) Statistics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockProjectionsClient)(nil).Statistics), varargs...)
}

// Update mocks base method.
func (m *MockProjectionsClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*UpdateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProjectionsClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectionsClient)(nil).Update), varargs...)
}

// MockProjections_StatisticsClient is a mock of Projections_StatisticsClient interface.
type MockProjections_StatisticsClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjections_StatisticsClientMockRecorder
}

// MockProjections_StatisticsClientMockRecorder is the mock recorder for MockProjections_StatisticsClient.
type MockProjections_StatisticsClientMockRecorder struct {
	mock *MockProjections_StatisticsClient
}

// NewMockProjections_StatisticsClient creates a new mock instance.
func NewMockProjections_StatisticsClient(ctrl *gomock.Controller) *MockProjections_StatisticsClient {
	mock := &MockProjections_StatisticsClient{ctrl: ctrl}
	mock.recorder = &MockProjections_StatisticsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjections_StatisticsClient) EXPECT() *MockProjections_StatisticsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockProjections_StatisticsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockProjections_StatisticsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockProjections_StatisticsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockProjections_StatisticsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockProjections_StatisticsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProjections_StatisticsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockProjections_StatisticsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockProjections_StatisticsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockProjections_StatisticsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockProjections_StatisticsClient) Recv() (*StatisticsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*StatisticsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockProjections_StatisticsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockProjections_StatisticsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockProjections_StatisticsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockProjections_StatisticsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProjections_StatisticsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockProjections_StatisticsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockProjections_StatisticsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProjections_StatisticsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockProjections_StatisticsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockProjections_StatisticsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockProjections_StatisticsClient)(nil).Trailer))
}

// MockProjectionsServer is a mock of ProjectionsServer interface.
type MockProjectionsServer struct {
	ctrl     *gomock.Controller
	recorder *MockProjectionsServerMockRecorder
}

// MockProjectionsServerMockRecorder is the mock recorder for MockProjectionsServer.
type MockProjectionsServerMockRecorder struct {
	mock *MockProjectionsServer
}

// NewMockProjectionsServer creates a new mock instance.
func NewMockProjectionsServer(ctrl *gomock.Controller) *MockProjectionsServer {
	mock := &MockProjectionsServer{ctrl: ctrl}
	mock.recorder = &MockProjectionsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectionsServer) EXPECT() *MockProjectionsServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProjectionsServer) Create(arg0 context.Context, arg1 *CreateReq) (*CreateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*CreateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProjectionsServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectionsServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockProjectionsServer) Delete(arg0 context.Context, arg1 *DeleteReq) (*DeleteResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*DeleteResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectionsServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectionsServer)(nil).Delete), arg0, arg1)
}

// Disable mocks base method.
func (m *MockProjectionsServer) Disable(arg0 context.Context, arg1 *DisableReq) (*DisableResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", arg0, arg1)
	ret0, _ := ret[0].(*DisableResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockProjectionsServerMockRecorder) Disable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockProjectionsServer)(nil).Disable), arg0, arg1)
}

// Enable mocks base method.
func (m *MockProjectionsServer) Enable(arg0 context.Context, arg1 *EnableReq) (*EnableResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", arg0, arg1)
	ret0, _ := ret[0].(*EnableResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enable indicates an expected call of Enable.
func (mr *MockProjectionsServerMockRecorder) Enable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockProjectionsServer)(nil).Enable), arg0, arg1)
}

// Reset mocks base method.
func (m *MockProjectionsServer) Reset(arg0 context.Context, arg1 *ResetReq) (*ResetResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0, arg1)
	ret0, _ := ret[0].(*ResetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *MockProjectionsServerMockRecorder) Reset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockProjectionsServer)(nil).Reset), arg0, arg1)
}

// RestartSubsystem mocks base method.
func (m *MockProjectionsServer) RestartSubsystem(arg0 context.Context, arg1 *shared.Empty) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartSubsystem", arg0, arg1)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartSubsystem indicates an expected call of RestartSubsystem.
func (mr *MockProjectionsServerMockRecorder) RestartSubsystem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartSubsystem", reflect.TypeOf((*MockProjectionsServer)(nil).RestartSubsystem), arg0, arg1)
}

// Result mocks base method.
func (m *MockProjectionsServer) Result(arg0 context.Context, arg1 *ResultReq) (*ResultResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", arg0, arg1)
	ret0, _ := ret[0].(*ResultResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockProjectionsServerMockRecorder) Result(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockProjectionsServer)(nil).Result), arg0, arg1)
}

// State mocks base method.
func (m *MockProjectionsServer) State(arg0 context.Context, arg1 *StateReq) (*StateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", arg0, arg1)
	ret0, _ := ret[0].(*StateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockProjectionsServerMockRecorder) State(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockProjectionsServer)(nil).State), arg0, arg1)
}

// Statistics mocks base method.
func (m *MockProjectionsServer) Statistics(arg0 *StatisticsReq, arg1 Projections_StatisticsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Statistics indicates an expected call of Statistics.
func (mr *MockProjectionsServerMockRecorder) Statistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockProjectionsServer)(nil).Statistics), arg0, arg1)
}

// Update mocks base method.
func (m *MockProjectionsServer) Update(arg0 context.Context, arg1 *UpdateReq) (*UpdateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*UpdateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProjectionsServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectionsServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedProjectionsServer mocks base method.
func (m *MockProjectionsServer) mustEmbedUnimplementedProjectionsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProjectionsServer")
}

// mustEmbedUnimplementedProjectionsServer indicates an expected call of mustEmbedUnimplementedProjectionsServer.
func (mr *MockProjectionsServerMockRecorder) mustEmbedUnimplementedProjectionsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProjectionsServer", reflect.TypeOf((*MockProjectionsServer)(nil).mustEmbedUnimplementedProjectionsServer))
}

// MockUnsafeProjectionsServer is a mock of UnsafeProjectionsServer interface.
type MockUnsafeProjectionsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProjectionsServerMockRecorder
}

// MockUnsafeProjectionsServerMockRecorder is the mock recorder for MockUnsafeProjectionsServer.
type MockUnsafeProjectionsServerMockRecorder struct {
	mock *MockUnsafeProjectionsServer
}

// NewMockUnsafeProjectionsServer creates a new mock instance.
func NewMockUnsafeProjectionsServer(ctrl *gomock.Controller) *MockUnsafeProjectionsServer {
	mock := &MockUnsafeProjectionsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProjectionsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProjectionsServer) EXPECT() *MockUnsafeProjectionsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProjectionsServer mocks base method.
func (m *MockUnsafeProjectionsServer) mustEmbedUnimplementedProjectionsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProjectionsServer")
}

// mustEmbedUnimplementedProjectionsServer indicates an expected call of mustEmbedUnimplementedProjectionsServer.
func (mr *MockUnsafeProjectionsServerMockRecorder) mustEmbedUnimplementedProjectionsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProjectionsServer", reflect.TypeOf((*MockUnsafeProjectionsServer)(nil).mustEmbedUnimplementedProjectionsServer))
}

// MockProjections_StatisticsServer is a mock of Projections_StatisticsServer interface.
type MockProjections_StatisticsServer struct {
	ctrl     *gomock.Controller
	recorder *MockProjections_StatisticsServerMockRecorder
}

// MockProjections_StatisticsServerMockRecorder is the mock recorder for MockProjections_StatisticsServer.
type MockProjections_StatisticsServerMockRecorder struct {
	mock *MockProjections_StatisticsServer
}

// NewMockProjections_StatisticsServer creates a new mock instance.
func NewMockProjections_StatisticsServer(ctrl *gomock.Controller) *MockProjections_StatisticsServer {
	mock := &MockProjections_StatisticsServer{ctrl: ctrl}
	mock.recorder = &MockProjections_StatisticsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjections_StatisticsServer) EXPECT() *MockProjections_StatisticsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockProjections_StatisticsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockProjections_StatisticsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProjections_StatisticsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockProjections_StatisticsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockProjections_StatisticsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProjections_StatisticsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockProjections_StatisticsServer) Send(arg0 *StatisticsResp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProjections_StatisticsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProjections_StatisticsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockProjections_StatisticsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockProjections_StatisticsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockProjections_StatisticsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockProjections_StatisticsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockProjections_StatisticsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProjections_StatisticsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockProjections_StatisticsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockProjections_StatisticsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockProjections_StatisticsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockProjections_StatisticsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockProjections_StatisticsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockProjections_StatisticsServer)(nil).SetTrailer), arg0)
}
