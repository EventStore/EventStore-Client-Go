// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package persistent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersistentSubscriptionsClient is the client API for PersistentSubscriptions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersistentSubscriptionsClient interface {
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
	Read(ctx context.Context, opts ...grpc.CallOption) (PersistentSubscriptions_ReadClient, error)
}

type persistentSubscriptionsClient struct {
	cc grpc.ClientConnInterface
}

func NewPersistentSubscriptionsClient(cc grpc.ClientConnInterface) PersistentSubscriptionsClient {
	return &persistentSubscriptionsClient{cc}
}

func (c *persistentSubscriptionsClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentSubscriptionsClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentSubscriptionsClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentSubscriptionsClient) Read(ctx context.Context, opts ...grpc.CallOption) (PersistentSubscriptions_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersistentSubscriptions_ServiceDesc.Streams[0], "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &persistentSubscriptionsReadClient{stream}
	return x, nil
}

type PersistentSubscriptions_ReadClient interface {
	Send(*ReadReq) error
	Recv() (*ReadResp, error)
	grpc.ClientStream
}

type persistentSubscriptionsReadClient struct {
	grpc.ClientStream
}

func (x *persistentSubscriptionsReadClient) Send(m *ReadReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *persistentSubscriptionsReadClient) Recv() (*ReadResp, error) {
	m := new(ReadResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersistentSubscriptionsServer is the server API for PersistentSubscriptions service.
// All implementations must embed UnimplementedPersistentSubscriptionsServer
// for forward compatibility
type PersistentSubscriptionsServer interface {
	Create(context.Context, *CreateReq) (*CreateResp, error)
	Update(context.Context, *UpdateReq) (*UpdateResp, error)
	Delete(context.Context, *DeleteReq) (*DeleteResp, error)
	Read(PersistentSubscriptions_ReadServer) error
	mustEmbedUnimplementedPersistentSubscriptionsServer()
}

// UnimplementedPersistentSubscriptionsServer must be embedded to have forward compatible implementations.
type UnimplementedPersistentSubscriptionsServer struct {
}

func (UnimplementedPersistentSubscriptionsServer) Create(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPersistentSubscriptionsServer) Update(context.Context, *UpdateReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPersistentSubscriptionsServer) Delete(context.Context, *DeleteReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPersistentSubscriptionsServer) Read(PersistentSubscriptions_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedPersistentSubscriptionsServer) mustEmbedUnimplementedPersistentSubscriptionsServer() {
}

// UnsafePersistentSubscriptionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersistentSubscriptionsServer will
// result in compilation errors.
type UnsafePersistentSubscriptionsServer interface {
	mustEmbedUnimplementedPersistentSubscriptionsServer()
}

func RegisterPersistentSubscriptionsServer(s grpc.ServiceRegistrar, srv PersistentSubscriptionsServer) {
	s.RegisterService(&PersistentSubscriptions_ServiceDesc, srv)
}

func _PersistentSubscriptions_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentSubscriptionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentSubscriptionsServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentSubscriptions_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentSubscriptionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentSubscriptionsServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentSubscriptions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentSubscriptionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentSubscriptionsServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentSubscriptions_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersistentSubscriptionsServer).Read(&persistentSubscriptionsReadServer{stream})
}

type PersistentSubscriptions_ReadServer interface {
	Send(*ReadResp) error
	Recv() (*ReadReq, error)
	grpc.ServerStream
}

type persistentSubscriptionsReadServer struct {
	grpc.ServerStream
}

func (x *persistentSubscriptionsReadServer) Send(m *ReadResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *persistentSubscriptionsReadServer) Recv() (*ReadReq, error) {
	m := new(ReadReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersistentSubscriptions_ServiceDesc is the grpc.ServiceDesc for PersistentSubscriptions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersistentSubscriptions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event_store.client.persistent_subscriptions.PersistentSubscriptions",
	HandlerType: (*PersistentSubscriptionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PersistentSubscriptions_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PersistentSubscriptions_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PersistentSubscriptions_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _PersistentSubscriptions_Read_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "persistent.proto",
}
