// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: persistent.proto

package persistent

import (
	shared "github.com/EventStore/EventStore-Client-Go/protos/shared"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReadReq_Nack_Action int32

const (
	ReadReq_Nack_Unknown ReadReq_Nack_Action = 0
	ReadReq_Nack_Park    ReadReq_Nack_Action = 1
	ReadReq_Nack_Retry   ReadReq_Nack_Action = 2
	ReadReq_Nack_Skip    ReadReq_Nack_Action = 3
	ReadReq_Nack_Stop    ReadReq_Nack_Action = 4
)

// Enum value maps for ReadReq_Nack_Action.
var (
	ReadReq_Nack_Action_name = map[int32]string{
		0: "Unknown",
		1: "Park",
		2: "Retry",
		3: "Skip",
		4: "Stop",
	}
	ReadReq_Nack_Action_value = map[string]int32{
		"Unknown": 0,
		"Park":    1,
		"Retry":   2,
		"Skip":    3,
		"Stop":    4,
	}
)

func (x ReadReq_Nack_Action) Enum() *ReadReq_Nack_Action {
	p := new(ReadReq_Nack_Action)
	*p = x
	return p
}

func (x ReadReq_Nack_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadReq_Nack_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_persistent_proto_enumTypes[0].Descriptor()
}

func (ReadReq_Nack_Action) Type() protoreflect.EnumType {
	return &file_persistent_proto_enumTypes[0]
}

func (x ReadReq_Nack_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadReq_Nack_Action.Descriptor instead.
func (ReadReq_Nack_Action) EnumDescriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{0, 2, 0}
}

type CreateReq_ConsumerStrategy int32

const (
	CreateReq_DispatchToSingle CreateReq_ConsumerStrategy = 0
	CreateReq_RoundRobin       CreateReq_ConsumerStrategy = 1
	CreateReq_Pinned           CreateReq_ConsumerStrategy = 2
)

// Enum value maps for CreateReq_ConsumerStrategy.
var (
	CreateReq_ConsumerStrategy_name = map[int32]string{
		0: "DispatchToSingle",
		1: "RoundRobin",
		2: "Pinned",
	}
	CreateReq_ConsumerStrategy_value = map[string]int32{
		"DispatchToSingle": 0,
		"RoundRobin":       1,
		"Pinned":           2,
	}
)

func (x CreateReq_ConsumerStrategy) Enum() *CreateReq_ConsumerStrategy {
	p := new(CreateReq_ConsumerStrategy)
	*p = x
	return p
}

func (x CreateReq_ConsumerStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateReq_ConsumerStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_persistent_proto_enumTypes[1].Descriptor()
}

func (CreateReq_ConsumerStrategy) Type() protoreflect.EnumType {
	return &file_persistent_proto_enumTypes[1]
}

func (x CreateReq_ConsumerStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateReq_ConsumerStrategy.Descriptor instead.
func (CreateReq_ConsumerStrategy) EnumDescriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{2, 0}
}

type UpdateReq_ConsumerStrategy int32

const (
	UpdateReq_DispatchToSingle UpdateReq_ConsumerStrategy = 0
	UpdateReq_RoundRobin       UpdateReq_ConsumerStrategy = 1
	UpdateReq_Pinned           UpdateReq_ConsumerStrategy = 2
)

// Enum value maps for UpdateReq_ConsumerStrategy.
var (
	UpdateReq_ConsumerStrategy_name = map[int32]string{
		0: "DispatchToSingle",
		1: "RoundRobin",
		2: "Pinned",
	}
	UpdateReq_ConsumerStrategy_value = map[string]int32{
		"DispatchToSingle": 0,
		"RoundRobin":       1,
		"Pinned":           2,
	}
)

func (x UpdateReq_ConsumerStrategy) Enum() *UpdateReq_ConsumerStrategy {
	p := new(UpdateReq_ConsumerStrategy)
	*p = x
	return p
}

func (x UpdateReq_ConsumerStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateReq_ConsumerStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_persistent_proto_enumTypes[2].Descriptor()
}

func (UpdateReq_ConsumerStrategy) Type() protoreflect.EnumType {
	return &file_persistent_proto_enumTypes[2]
}

func (x UpdateReq_ConsumerStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateReq_ConsumerStrategy.Descriptor instead.
func (UpdateReq_ConsumerStrategy) EnumDescriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{4, 0}
}

type ReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*ReadReq_Options_
	//	*ReadReq_Ack_
	//	*ReadReq_Nack_
	Content isReadReq_Content `protobuf_oneof:"content"`
}

func (x *ReadReq) Reset() {
	*x = ReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReq) ProtoMessage() {}

func (x *ReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReq.ProtoReflect.Descriptor instead.
func (*ReadReq) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{0}
}

func (m *ReadReq) GetContent() isReadReq_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ReadReq) GetOptions() *ReadReq_Options {
	if x, ok := x.GetContent().(*ReadReq_Options_); ok {
		return x.Options
	}
	return nil
}

func (x *ReadReq) GetAck() *ReadReq_Ack {
	if x, ok := x.GetContent().(*ReadReq_Ack_); ok {
		return x.Ack
	}
	return nil
}

func (x *ReadReq) GetNack() *ReadReq_Nack {
	if x, ok := x.GetContent().(*ReadReq_Nack_); ok {
		return x.Nack
	}
	return nil
}

type isReadReq_Content interface {
	isReadReq_Content()
}

type ReadReq_Options_ struct {
	Options *ReadReq_Options `protobuf:"bytes,1,opt,name=options,proto3,oneof"`
}

type ReadReq_Ack_ struct {
	Ack *ReadReq_Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

type ReadReq_Nack_ struct {
	Nack *ReadReq_Nack `protobuf:"bytes,3,opt,name=nack,proto3,oneof"`
}

func (*ReadReq_Options_) isReadReq_Content() {}

func (*ReadReq_Ack_) isReadReq_Content() {}

func (*ReadReq_Nack_) isReadReq_Content() {}

type ReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*ReadResp_Event
	//	*ReadResp_SubscriptionConfirmation_
	Content isReadResp_Content `protobuf_oneof:"content"`
}

func (x *ReadResp) Reset() {
	*x = ReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResp) ProtoMessage() {}

func (x *ReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResp.ProtoReflect.Descriptor instead.
func (*ReadResp) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{1}
}

func (m *ReadResp) GetContent() isReadResp_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ReadResp) GetEvent() *ReadResp_ReadEvent {
	if x, ok := x.GetContent().(*ReadResp_Event); ok {
		return x.Event
	}
	return nil
}

func (x *ReadResp) GetSubscriptionConfirmation() *ReadResp_SubscriptionConfirmation {
	if x, ok := x.GetContent().(*ReadResp_SubscriptionConfirmation_); ok {
		return x.SubscriptionConfirmation
	}
	return nil
}

type isReadResp_Content interface {
	isReadResp_Content()
}

type ReadResp_Event struct {
	Event *ReadResp_ReadEvent `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

type ReadResp_SubscriptionConfirmation_ struct {
	SubscriptionConfirmation *ReadResp_SubscriptionConfirmation `protobuf:"bytes,2,opt,name=subscription_confirmation,json=subscriptionConfirmation,proto3,oneof"`
}

func (*ReadResp_Event) isReadResp_Content() {}

func (*ReadResp_SubscriptionConfirmation_) isReadResp_Content() {}

type CreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *CreateReq_Options `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateReq) Reset() {
	*x = CreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReq) ProtoMessage() {}

func (x *CreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReq.ProtoReflect.Descriptor instead.
func (*CreateReq) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{2}
}

func (x *CreateReq) GetOptions() *CreateReq_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateResp) Reset() {
	*x = CreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResp) ProtoMessage() {}

func (x *CreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResp.ProtoReflect.Descriptor instead.
func (*CreateResp) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{3}
}

type UpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *UpdateReq_Options `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *UpdateReq) Reset() {
	*x = UpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReq) ProtoMessage() {}

func (x *UpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReq.ProtoReflect.Descriptor instead.
func (*UpdateReq) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateReq) GetOptions() *UpdateReq_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type UpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResp) Reset() {
	*x = UpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResp) ProtoMessage() {}

func (x *UpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResp.ProtoReflect.Descriptor instead.
func (*UpdateResp) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{5}
}

type DeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *DeleteReq_Options `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *DeleteReq) Reset() {
	*x = DeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReq) ProtoMessage() {}

func (x *DeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReq.ProtoReflect.Descriptor instead.
func (*DeleteReq) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteReq) GetOptions() *DeleteReq_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type DeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResp) Reset() {
	*x = DeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResp) ProtoMessage() {}

func (x *DeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResp.ProtoReflect.Descriptor instead.
func (*DeleteResp) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{7}
}

type ReadReq_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StreamOption:
	//	*ReadReq_Options_StreamIdentifier
	//	*ReadReq_Options_All
	StreamOption isReadReq_Options_StreamOption `protobuf_oneof:"stream_option"`
	GroupName    string                         `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	BufferSize   int32                          `protobuf:"varint,3,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
	UuidOption   *ReadReq_Options_UUIDOption    `protobuf:"bytes,4,opt,name=uuid_option,json=uuidOption,proto3" json:"uuid_option,omitempty"`
}

func (x *ReadReq_Options) Reset() {
	*x = ReadReq_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReq_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReq_Options) ProtoMessage() {}

func (x *ReadReq_Options) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReq_Options.ProtoReflect.Descriptor instead.
func (*ReadReq_Options) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ReadReq_Options) GetStreamOption() isReadReq_Options_StreamOption {
	if m != nil {
		return m.StreamOption
	}
	return nil
}

func (x *ReadReq_Options) GetStreamIdentifier() *shared.StreamIdentifier {
	if x, ok := x.GetStreamOption().(*ReadReq_Options_StreamIdentifier); ok {
		return x.StreamIdentifier
	}
	return nil
}

func (x *ReadReq_Options) GetAll() *shared.Empty {
	if x, ok := x.GetStreamOption().(*ReadReq_Options_All); ok {
		return x.All
	}
	return nil
}

func (x *ReadReq_Options) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ReadReq_Options) GetBufferSize() int32 {
	if x != nil {
		return x.BufferSize
	}
	return 0
}

func (x *ReadReq_Options) GetUuidOption() *ReadReq_Options_UUIDOption {
	if x != nil {
		return x.UuidOption
	}
	return nil
}

type isReadReq_Options_StreamOption interface {
	isReadReq_Options_StreamOption()
}

type ReadReq_Options_StreamIdentifier struct {
	StreamIdentifier *shared.StreamIdentifier `protobuf:"bytes,1,opt,name=stream_identifier,json=streamIdentifier,proto3,oneof"`
}

type ReadReq_Options_All struct {
	All *shared.Empty `protobuf:"bytes,5,opt,name=all,proto3,oneof"`
}

func (*ReadReq_Options_StreamIdentifier) isReadReq_Options_StreamOption() {}

func (*ReadReq_Options_All) isReadReq_Options_StreamOption() {}

type ReadReq_Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  []byte         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ids []*shared.UUID `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ReadReq_Ack) Reset() {
	*x = ReadReq_Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReq_Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReq_Ack) ProtoMessage() {}

func (x *ReadReq_Ack) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReq_Ack.ProtoReflect.Descriptor instead.
func (*ReadReq_Ack) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ReadReq_Ack) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReadReq_Ack) GetIds() []*shared.UUID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ReadReq_Nack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     []byte              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ids    []*shared.UUID      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	Action ReadReq_Nack_Action `protobuf:"varint,3,opt,name=action,proto3,enum=event_store.client.persistent_subscriptions.ReadReq_Nack_Action" json:"action,omitempty"`
	Reason string              `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ReadReq_Nack) Reset() {
	*x = ReadReq_Nack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReq_Nack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReq_Nack) ProtoMessage() {}

func (x *ReadReq_Nack) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReq_Nack.ProtoReflect.Descriptor instead.
func (*ReadReq_Nack) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ReadReq_Nack) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReadReq_Nack) GetIds() []*shared.UUID {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ReadReq_Nack) GetAction() ReadReq_Nack_Action {
	if x != nil {
		return x.Action
	}
	return ReadReq_Nack_Unknown
}

func (x *ReadReq_Nack) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ReadReq_Options_UUIDOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*ReadReq_Options_UUIDOption_Structured
	//	*ReadReq_Options_UUIDOption_String_
	Content isReadReq_Options_UUIDOption_Content `protobuf_oneof:"content"`
}

func (x *ReadReq_Options_UUIDOption) Reset() {
	*x = ReadReq_Options_UUIDOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReq_Options_UUIDOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReq_Options_UUIDOption) ProtoMessage() {}

func (x *ReadReq_Options_UUIDOption) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReq_Options_UUIDOption.ProtoReflect.Descriptor instead.
func (*ReadReq_Options_UUIDOption) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *ReadReq_Options_UUIDOption) GetContent() isReadReq_Options_UUIDOption_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ReadReq_Options_UUIDOption) GetStructured() *shared.Empty {
	if x, ok := x.GetContent().(*ReadReq_Options_UUIDOption_Structured); ok {
		return x.Structured
	}
	return nil
}

func (x *ReadReq_Options_UUIDOption) GetString_() *shared.Empty {
	if x, ok := x.GetContent().(*ReadReq_Options_UUIDOption_String_); ok {
		return x.String_
	}
	return nil
}

type isReadReq_Options_UUIDOption_Content interface {
	isReadReq_Options_UUIDOption_Content()
}

type ReadReq_Options_UUIDOption_Structured struct {
	Structured *shared.Empty `protobuf:"bytes,1,opt,name=structured,proto3,oneof"`
}

type ReadReq_Options_UUIDOption_String_ struct {
	String_ *shared.Empty `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}

func (*ReadReq_Options_UUIDOption_Structured) isReadReq_Options_UUIDOption_Content() {}

func (*ReadReq_Options_UUIDOption_String_) isReadReq_Options_UUIDOption_Content() {}

type ReadResp_ReadEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *ReadResp_ReadEvent_RecordedEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Link  *ReadResp_ReadEvent_RecordedEvent `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	// Types that are assignable to Position:
	//	*ReadResp_ReadEvent_CommitPosition
	//	*ReadResp_ReadEvent_NoPosition
	Position isReadResp_ReadEvent_Position `protobuf_oneof:"position"`
	// Types that are assignable to Count:
	//	*ReadResp_ReadEvent_RetryCount
	//	*ReadResp_ReadEvent_NoRetryCount
	Count isReadResp_ReadEvent_Count `protobuf_oneof:"count"`
}

func (x *ReadResp_ReadEvent) Reset() {
	*x = ReadResp_ReadEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResp_ReadEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResp_ReadEvent) ProtoMessage() {}

func (x *ReadResp_ReadEvent) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResp_ReadEvent.ProtoReflect.Descriptor instead.
func (*ReadResp_ReadEvent) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ReadResp_ReadEvent) GetEvent() *ReadResp_ReadEvent_RecordedEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ReadResp_ReadEvent) GetLink() *ReadResp_ReadEvent_RecordedEvent {
	if x != nil {
		return x.Link
	}
	return nil
}

func (m *ReadResp_ReadEvent) GetPosition() isReadResp_ReadEvent_Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (x *ReadResp_ReadEvent) GetCommitPosition() uint64 {
	if x, ok := x.GetPosition().(*ReadResp_ReadEvent_CommitPosition); ok {
		return x.CommitPosition
	}
	return 0
}

func (x *ReadResp_ReadEvent) GetNoPosition() *shared.Empty {
	if x, ok := x.GetPosition().(*ReadResp_ReadEvent_NoPosition); ok {
		return x.NoPosition
	}
	return nil
}

func (m *ReadResp_ReadEvent) GetCount() isReadResp_ReadEvent_Count {
	if m != nil {
		return m.Count
	}
	return nil
}

func (x *ReadResp_ReadEvent) GetRetryCount() int32 {
	if x, ok := x.GetCount().(*ReadResp_ReadEvent_RetryCount); ok {
		return x.RetryCount
	}
	return 0
}

func (x *ReadResp_ReadEvent) GetNoRetryCount() *shared.Empty {
	if x, ok := x.GetCount().(*ReadResp_ReadEvent_NoRetryCount); ok {
		return x.NoRetryCount
	}
	return nil
}

type isReadResp_ReadEvent_Position interface {
	isReadResp_ReadEvent_Position()
}

type ReadResp_ReadEvent_CommitPosition struct {
	CommitPosition uint64 `protobuf:"varint,3,opt,name=commit_position,json=commitPosition,proto3,oneof"`
}

type ReadResp_ReadEvent_NoPosition struct {
	NoPosition *shared.Empty `protobuf:"bytes,4,opt,name=no_position,json=noPosition,proto3,oneof"`
}

func (*ReadResp_ReadEvent_CommitPosition) isReadResp_ReadEvent_Position() {}

func (*ReadResp_ReadEvent_NoPosition) isReadResp_ReadEvent_Position() {}

type isReadResp_ReadEvent_Count interface {
	isReadResp_ReadEvent_Count()
}

type ReadResp_ReadEvent_RetryCount struct {
	RetryCount int32 `protobuf:"varint,5,opt,name=retry_count,json=retryCount,proto3,oneof"`
}

type ReadResp_ReadEvent_NoRetryCount struct {
	NoRetryCount *shared.Empty `protobuf:"bytes,6,opt,name=no_retry_count,json=noRetryCount,proto3,oneof"`
}

func (*ReadResp_ReadEvent_RetryCount) isReadResp_ReadEvent_Count() {}

func (*ReadResp_ReadEvent_NoRetryCount) isReadResp_ReadEvent_Count() {}

type ReadResp_SubscriptionConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (x *ReadResp_SubscriptionConfirmation) Reset() {
	*x = ReadResp_SubscriptionConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResp_SubscriptionConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResp_SubscriptionConfirmation) ProtoMessage() {}

func (x *ReadResp_SubscriptionConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResp_SubscriptionConfirmation.ProtoReflect.Descriptor instead.
func (*ReadResp_SubscriptionConfirmation) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ReadResp_SubscriptionConfirmation) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type ReadResp_ReadEvent_RecordedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *shared.UUID             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StreamIdentifier *shared.StreamIdentifier `protobuf:"bytes,2,opt,name=stream_identifier,json=streamIdentifier,proto3" json:"stream_identifier,omitempty"`
	StreamRevision   uint64                   `protobuf:"varint,3,opt,name=stream_revision,json=streamRevision,proto3" json:"stream_revision,omitempty"`
	PreparePosition  uint64                   `protobuf:"varint,4,opt,name=prepare_position,json=preparePosition,proto3" json:"prepare_position,omitempty"`
	CommitPosition   uint64                   `protobuf:"varint,5,opt,name=commit_position,json=commitPosition,proto3" json:"commit_position,omitempty"`
	Metadata         map[string]string        `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomMetadata   []byte                   `protobuf:"bytes,7,opt,name=custom_metadata,json=customMetadata,proto3" json:"custom_metadata,omitempty"`
	Data             []byte                   `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReadResp_ReadEvent_RecordedEvent) Reset() {
	*x = ReadResp_ReadEvent_RecordedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResp_ReadEvent_RecordedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResp_ReadEvent_RecordedEvent) ProtoMessage() {}

func (x *ReadResp_ReadEvent_RecordedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResp_ReadEvent_RecordedEvent.ProtoReflect.Descriptor instead.
func (*ReadResp_ReadEvent_RecordedEvent) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *ReadResp_ReadEvent_RecordedEvent) GetId() *shared.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReadResp_ReadEvent_RecordedEvent) GetStreamIdentifier() *shared.StreamIdentifier {
	if x != nil {
		return x.StreamIdentifier
	}
	return nil
}

func (x *ReadResp_ReadEvent_RecordedEvent) GetStreamRevision() uint64 {
	if x != nil {
		return x.StreamRevision
	}
	return 0
}

func (x *ReadResp_ReadEvent_RecordedEvent) GetPreparePosition() uint64 {
	if x != nil {
		return x.PreparePosition
	}
	return 0
}

func (x *ReadResp_ReadEvent_RecordedEvent) GetCommitPosition() uint64 {
	if x != nil {
		return x.CommitPosition
	}
	return 0
}

func (x *ReadResp_ReadEvent_RecordedEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ReadResp_ReadEvent_RecordedEvent) GetCustomMetadata() []byte {
	if x != nil {
		return x.CustomMetadata
	}
	return nil
}

func (x *ReadResp_ReadEvent_RecordedEvent) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateReq_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StreamOption:
	//	*CreateReq_Options_Stream
	//	*CreateReq_Options_All
	StreamOption isCreateReq_Options_StreamOption `protobuf_oneof:"stream_option"`
	// Deprecated: Do not use.
	StreamIdentifier *shared.StreamIdentifier `protobuf:"bytes,1,opt,name=stream_identifier,json=streamIdentifier,proto3" json:"stream_identifier,omitempty"`
	GroupName        string                   `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Settings         *CreateReq_Settings      `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *CreateReq_Options) Reset() {
	*x = CreateReq_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReq_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReq_Options) ProtoMessage() {}

func (x *CreateReq_Options) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReq_Options.ProtoReflect.Descriptor instead.
func (*CreateReq_Options) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{2, 0}
}

func (m *CreateReq_Options) GetStreamOption() isCreateReq_Options_StreamOption {
	if m != nil {
		return m.StreamOption
	}
	return nil
}

func (x *CreateReq_Options) GetStream() *CreateReq_StreamOptions {
	if x, ok := x.GetStreamOption().(*CreateReq_Options_Stream); ok {
		return x.Stream
	}
	return nil
}

func (x *CreateReq_Options) GetAll() *CreateReq_AllOptions {
	if x, ok := x.GetStreamOption().(*CreateReq_Options_All); ok {
		return x.All
	}
	return nil
}

// Deprecated: Do not use.
func (x *CreateReq_Options) GetStreamIdentifier() *shared.StreamIdentifier {
	if x != nil {
		return x.StreamIdentifier
	}
	return nil
}

func (x *CreateReq_Options) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CreateReq_Options) GetSettings() *CreateReq_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type isCreateReq_Options_StreamOption interface {
	isCreateReq_Options_StreamOption()
}

type CreateReq_Options_Stream struct {
	Stream *CreateReq_StreamOptions `protobuf:"bytes,4,opt,name=stream,proto3,oneof"`
}

type CreateReq_Options_All struct {
	All *CreateReq_AllOptions `protobuf:"bytes,5,opt,name=all,proto3,oneof"`
}

func (*CreateReq_Options_Stream) isCreateReq_Options_StreamOption() {}

func (*CreateReq_Options_All) isCreateReq_Options_StreamOption() {}

type CreateReq_StreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamIdentifier *shared.StreamIdentifier `protobuf:"bytes,1,opt,name=stream_identifier,json=streamIdentifier,proto3" json:"stream_identifier,omitempty"`
	// Types that are assignable to RevisionOption:
	//	*CreateReq_StreamOptions_Revision
	//	*CreateReq_StreamOptions_Start
	//	*CreateReq_StreamOptions_End
	RevisionOption isCreateReq_StreamOptions_RevisionOption `protobuf_oneof:"revision_option"`
}

func (x *CreateReq_StreamOptions) Reset() {
	*x = CreateReq_StreamOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReq_StreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReq_StreamOptions) ProtoMessage() {}

func (x *CreateReq_StreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReq_StreamOptions.ProtoReflect.Descriptor instead.
func (*CreateReq_StreamOptions) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CreateReq_StreamOptions) GetStreamIdentifier() *shared.StreamIdentifier {
	if x != nil {
		return x.StreamIdentifier
	}
	return nil
}

func (m *CreateReq_StreamOptions) GetRevisionOption() isCreateReq_StreamOptions_RevisionOption {
	if m != nil {
		return m.RevisionOption
	}
	return nil
}

func (x *CreateReq_StreamOptions) GetRevision() uint64 {
	if x, ok := x.GetRevisionOption().(*CreateReq_StreamOptions_Revision); ok {
		return x.Revision
	}
	return 0
}

func (x *CreateReq_StreamOptions) GetStart() *shared.Empty {
	if x, ok := x.GetRevisionOption().(*CreateReq_StreamOptions_Start); ok {
		return x.Start
	}
	return nil
}

func (x *CreateReq_StreamOptions) GetEnd() *shared.Empty {
	if x, ok := x.GetRevisionOption().(*CreateReq_StreamOptions_End); ok {
		return x.End
	}
	return nil
}

type isCreateReq_StreamOptions_RevisionOption interface {
	isCreateReq_StreamOptions_RevisionOption()
}

type CreateReq_StreamOptions_Revision struct {
	Revision uint64 `protobuf:"varint,2,opt,name=revision,proto3,oneof"`
}

type CreateReq_StreamOptions_Start struct {
	Start *shared.Empty `protobuf:"bytes,3,opt,name=start,proto3,oneof"`
}

type CreateReq_StreamOptions_End struct {
	End *shared.Empty `protobuf:"bytes,4,opt,name=end,proto3,oneof"`
}

func (*CreateReq_StreamOptions_Revision) isCreateReq_StreamOptions_RevisionOption() {}

func (*CreateReq_StreamOptions_Start) isCreateReq_StreamOptions_RevisionOption() {}

func (*CreateReq_StreamOptions_End) isCreateReq_StreamOptions_RevisionOption() {}

type CreateReq_AllOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AllOption:
	//	*CreateReq_AllOptions_Position
	//	*CreateReq_AllOptions_Start
	//	*CreateReq_AllOptions_End
	AllOption isCreateReq_AllOptions_AllOption `protobuf_oneof:"all_option"`
	// Types that are assignable to FilterOption:
	//	*CreateReq_AllOptions_Filter
	//	*CreateReq_AllOptions_NoFilter
	FilterOption isCreateReq_AllOptions_FilterOption `protobuf_oneof:"filter_option"`
}

func (x *CreateReq_AllOptions) Reset() {
	*x = CreateReq_AllOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReq_AllOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReq_AllOptions) ProtoMessage() {}

func (x *CreateReq_AllOptions) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReq_AllOptions.ProtoReflect.Descriptor instead.
func (*CreateReq_AllOptions) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{2, 2}
}

func (m *CreateReq_AllOptions) GetAllOption() isCreateReq_AllOptions_AllOption {
	if m != nil {
		return m.AllOption
	}
	return nil
}

func (x *CreateReq_AllOptions) GetPosition() *CreateReq_Position {
	if x, ok := x.GetAllOption().(*CreateReq_AllOptions_Position); ok {
		return x.Position
	}
	return nil
}

func (x *CreateReq_AllOptions) GetStart() *shared.Empty {
	if x, ok := x.GetAllOption().(*CreateReq_AllOptions_Start); ok {
		return x.Start
	}
	return nil
}

func (x *CreateReq_AllOptions) GetEnd() *shared.Empty {
	if x, ok := x.GetAllOption().(*CreateReq_AllOptions_End); ok {
		return x.End
	}
	return nil
}

func (m *CreateReq_AllOptions) GetFilterOption() isCreateReq_AllOptions_FilterOption {
	if m != nil {
		return m.FilterOption
	}
	return nil
}

func (x *CreateReq_AllOptions) GetFilter() *CreateReq_AllOptions_FilterOptions {
	if x, ok := x.GetFilterOption().(*CreateReq_AllOptions_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *CreateReq_AllOptions) GetNoFilter() *shared.Empty {
	if x, ok := x.GetFilterOption().(*CreateReq_AllOptions_NoFilter); ok {
		return x.NoFilter
	}
	return nil
}

type isCreateReq_AllOptions_AllOption interface {
	isCreateReq_AllOptions_AllOption()
}

type CreateReq_AllOptions_Position struct {
	Position *CreateReq_Position `protobuf:"bytes,1,opt,name=position,proto3,oneof"`
}

type CreateReq_AllOptions_Start struct {
	Start *shared.Empty `protobuf:"bytes,2,opt,name=start,proto3,oneof"`
}

type CreateReq_AllOptions_End struct {
	End *shared.Empty `protobuf:"bytes,3,opt,name=end,proto3,oneof"`
}

func (*CreateReq_AllOptions_Position) isCreateReq_AllOptions_AllOption() {}

func (*CreateReq_AllOptions_Start) isCreateReq_AllOptions_AllOption() {}

func (*CreateReq_AllOptions_End) isCreateReq_AllOptions_AllOption() {}

type isCreateReq_AllOptions_FilterOption interface {
	isCreateReq_AllOptions_FilterOption()
}

type CreateReq_AllOptions_Filter struct {
	Filter *CreateReq_AllOptions_FilterOptions `protobuf:"bytes,4,opt,name=filter,proto3,oneof"`
}

type CreateReq_AllOptions_NoFilter struct {
	NoFilter *shared.Empty `protobuf:"bytes,5,opt,name=no_filter,json=noFilter,proto3,oneof"`
}

func (*CreateReq_AllOptions_Filter) isCreateReq_AllOptions_FilterOption() {}

func (*CreateReq_AllOptions_NoFilter) isCreateReq_AllOptions_FilterOption() {}

type CreateReq_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitPosition  uint64 `protobuf:"varint,1,opt,name=commit_position,json=commitPosition,proto3" json:"commit_position,omitempty"`
	PreparePosition uint64 `protobuf:"varint,2,opt,name=prepare_position,json=preparePosition,proto3" json:"prepare_position,omitempty"`
}

func (x *CreateReq_Position) Reset() {
	*x = CreateReq_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReq_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReq_Position) ProtoMessage() {}

func (x *CreateReq_Position) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReq_Position.ProtoReflect.Descriptor instead.
func (*CreateReq_Position) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{2, 3}
}

func (x *CreateReq_Position) GetCommitPosition() uint64 {
	if x != nil {
		return x.CommitPosition
	}
	return 0
}

func (x *CreateReq_Position) GetPreparePosition() uint64 {
	if x != nil {
		return x.PreparePosition
	}
	return 0
}

type CreateReq_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolveLinks bool `protobuf:"varint,1,opt,name=resolve_links,json=resolveLinks,proto3" json:"resolve_links,omitempty"`
	// Deprecated: Do not use.
	Revision              uint64                     `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	ExtraStatistics       bool                       `protobuf:"varint,3,opt,name=extra_statistics,json=extraStatistics,proto3" json:"extra_statistics,omitempty"`
	MaxRetryCount         int32                      `protobuf:"varint,5,opt,name=max_retry_count,json=maxRetryCount,proto3" json:"max_retry_count,omitempty"`
	MinCheckpointCount    int32                      `protobuf:"varint,7,opt,name=min_checkpoint_count,json=minCheckpointCount,proto3" json:"min_checkpoint_count,omitempty"`
	MaxCheckpointCount    int32                      `protobuf:"varint,8,opt,name=max_checkpoint_count,json=maxCheckpointCount,proto3" json:"max_checkpoint_count,omitempty"`
	MaxSubscriberCount    int32                      `protobuf:"varint,9,opt,name=max_subscriber_count,json=maxSubscriberCount,proto3" json:"max_subscriber_count,omitempty"`
	LiveBufferSize        int32                      `protobuf:"varint,10,opt,name=live_buffer_size,json=liveBufferSize,proto3" json:"live_buffer_size,omitempty"`
	ReadBatchSize         int32                      `protobuf:"varint,11,opt,name=read_batch_size,json=readBatchSize,proto3" json:"read_batch_size,omitempty"`
	HistoryBufferSize     int32                      `protobuf:"varint,12,opt,name=history_buffer_size,json=historyBufferSize,proto3" json:"history_buffer_size,omitempty"`
	NamedConsumerStrategy CreateReq_ConsumerStrategy `protobuf:"varint,13,opt,name=named_consumer_strategy,json=namedConsumerStrategy,proto3,enum=event_store.client.persistent_subscriptions.CreateReq_ConsumerStrategy" json:"named_consumer_strategy,omitempty"`
	// Types that are assignable to MessageTimeout:
	//	*CreateReq_Settings_MessageTimeoutTicks
	//	*CreateReq_Settings_MessageTimeoutMs
	MessageTimeout isCreateReq_Settings_MessageTimeout `protobuf_oneof:"message_timeout"`
	// Types that are assignable to CheckpointAfter:
	//	*CreateReq_Settings_CheckpointAfterTicks
	//	*CreateReq_Settings_CheckpointAfterMs
	CheckpointAfter isCreateReq_Settings_CheckpointAfter `protobuf_oneof:"checkpoint_after"`
}

func (x *CreateReq_Settings) Reset() {
	*x = CreateReq_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReq_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReq_Settings) ProtoMessage() {}

func (x *CreateReq_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReq_Settings.ProtoReflect.Descriptor instead.
func (*CreateReq_Settings) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{2, 4}
}

func (x *CreateReq_Settings) GetResolveLinks() bool {
	if x != nil {
		return x.ResolveLinks
	}
	return false
}

// Deprecated: Do not use.
func (x *CreateReq_Settings) GetRevision() uint64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *CreateReq_Settings) GetExtraStatistics() bool {
	if x != nil {
		return x.ExtraStatistics
	}
	return false
}

func (x *CreateReq_Settings) GetMaxRetryCount() int32 {
	if x != nil {
		return x.MaxRetryCount
	}
	return 0
}

func (x *CreateReq_Settings) GetMinCheckpointCount() int32 {
	if x != nil {
		return x.MinCheckpointCount
	}
	return 0
}

func (x *CreateReq_Settings) GetMaxCheckpointCount() int32 {
	if x != nil {
		return x.MaxCheckpointCount
	}
	return 0
}

func (x *CreateReq_Settings) GetMaxSubscriberCount() int32 {
	if x != nil {
		return x.MaxSubscriberCount
	}
	return 0
}

func (x *CreateReq_Settings) GetLiveBufferSize() int32 {
	if x != nil {
		return x.LiveBufferSize
	}
	return 0
}

func (x *CreateReq_Settings) GetReadBatchSize() int32 {
	if x != nil {
		return x.ReadBatchSize
	}
	return 0
}

func (x *CreateReq_Settings) GetHistoryBufferSize() int32 {
	if x != nil {
		return x.HistoryBufferSize
	}
	return 0
}

func (x *CreateReq_Settings) GetNamedConsumerStrategy() CreateReq_ConsumerStrategy {
	if x != nil {
		return x.NamedConsumerStrategy
	}
	return CreateReq_DispatchToSingle
}

func (m *CreateReq_Settings) GetMessageTimeout() isCreateReq_Settings_MessageTimeout {
	if m != nil {
		return m.MessageTimeout
	}
	return nil
}

func (x *CreateReq_Settings) GetMessageTimeoutTicks() int64 {
	if x, ok := x.GetMessageTimeout().(*CreateReq_Settings_MessageTimeoutTicks); ok {
		return x.MessageTimeoutTicks
	}
	return 0
}

func (x *CreateReq_Settings) GetMessageTimeoutMs() int32 {
	if x, ok := x.GetMessageTimeout().(*CreateReq_Settings_MessageTimeoutMs); ok {
		return x.MessageTimeoutMs
	}
	return 0
}

func (m *CreateReq_Settings) GetCheckpointAfter() isCreateReq_Settings_CheckpointAfter {
	if m != nil {
		return m.CheckpointAfter
	}
	return nil
}

func (x *CreateReq_Settings) GetCheckpointAfterTicks() int64 {
	if x, ok := x.GetCheckpointAfter().(*CreateReq_Settings_CheckpointAfterTicks); ok {
		return x.CheckpointAfterTicks
	}
	return 0
}

func (x *CreateReq_Settings) GetCheckpointAfterMs() int32 {
	if x, ok := x.GetCheckpointAfter().(*CreateReq_Settings_CheckpointAfterMs); ok {
		return x.CheckpointAfterMs
	}
	return 0
}

type isCreateReq_Settings_MessageTimeout interface {
	isCreateReq_Settings_MessageTimeout()
}

type CreateReq_Settings_MessageTimeoutTicks struct {
	MessageTimeoutTicks int64 `protobuf:"varint,4,opt,name=message_timeout_ticks,json=messageTimeoutTicks,proto3,oneof"`
}

type CreateReq_Settings_MessageTimeoutMs struct {
	MessageTimeoutMs int32 `protobuf:"varint,14,opt,name=message_timeout_ms,json=messageTimeoutMs,proto3,oneof"`
}

func (*CreateReq_Settings_MessageTimeoutTicks) isCreateReq_Settings_MessageTimeout() {}

func (*CreateReq_Settings_MessageTimeoutMs) isCreateReq_Settings_MessageTimeout() {}

type isCreateReq_Settings_CheckpointAfter interface {
	isCreateReq_Settings_CheckpointAfter()
}

type CreateReq_Settings_CheckpointAfterTicks struct {
	CheckpointAfterTicks int64 `protobuf:"varint,6,opt,name=checkpoint_after_ticks,json=checkpointAfterTicks,proto3,oneof"`
}

type CreateReq_Settings_CheckpointAfterMs struct {
	CheckpointAfterMs int32 `protobuf:"varint,15,opt,name=checkpoint_after_ms,json=checkpointAfterMs,proto3,oneof"`
}

func (*CreateReq_Settings_CheckpointAfterTicks) isCreateReq_Settings_CheckpointAfter() {}

func (*CreateReq_Settings_CheckpointAfterMs) isCreateReq_Settings_CheckpointAfter() {}

type CreateReq_AllOptions_FilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//	*CreateReq_AllOptions_FilterOptions_StreamIdentifier
	//	*CreateReq_AllOptions_FilterOptions_EventType
	Filter isCreateReq_AllOptions_FilterOptions_Filter `protobuf_oneof:"filter"`
	// Types that are assignable to Window:
	//	*CreateReq_AllOptions_FilterOptions_Max
	//	*CreateReq_AllOptions_FilterOptions_Count
	Window                       isCreateReq_AllOptions_FilterOptions_Window `protobuf_oneof:"window"`
	CheckpointIntervalMultiplier uint32                                      `protobuf:"varint,5,opt,name=checkpointIntervalMultiplier,proto3" json:"checkpointIntervalMultiplier,omitempty"`
}

func (x *CreateReq_AllOptions_FilterOptions) Reset() {
	*x = CreateReq_AllOptions_FilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReq_AllOptions_FilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReq_AllOptions_FilterOptions) ProtoMessage() {}

func (x *CreateReq_AllOptions_FilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReq_AllOptions_FilterOptions.ProtoReflect.Descriptor instead.
func (*CreateReq_AllOptions_FilterOptions) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{2, 2, 0}
}

func (m *CreateReq_AllOptions_FilterOptions) GetFilter() isCreateReq_AllOptions_FilterOptions_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *CreateReq_AllOptions_FilterOptions) GetStreamIdentifier() *CreateReq_AllOptions_FilterOptions_Expression {
	if x, ok := x.GetFilter().(*CreateReq_AllOptions_FilterOptions_StreamIdentifier); ok {
		return x.StreamIdentifier
	}
	return nil
}

func (x *CreateReq_AllOptions_FilterOptions) GetEventType() *CreateReq_AllOptions_FilterOptions_Expression {
	if x, ok := x.GetFilter().(*CreateReq_AllOptions_FilterOptions_EventType); ok {
		return x.EventType
	}
	return nil
}

func (m *CreateReq_AllOptions_FilterOptions) GetWindow() isCreateReq_AllOptions_FilterOptions_Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (x *CreateReq_AllOptions_FilterOptions) GetMax() uint32 {
	if x, ok := x.GetWindow().(*CreateReq_AllOptions_FilterOptions_Max); ok {
		return x.Max
	}
	return 0
}

func (x *CreateReq_AllOptions_FilterOptions) GetCount() *shared.Empty {
	if x, ok := x.GetWindow().(*CreateReq_AllOptions_FilterOptions_Count); ok {
		return x.Count
	}
	return nil
}

func (x *CreateReq_AllOptions_FilterOptions) GetCheckpointIntervalMultiplier() uint32 {
	if x != nil {
		return x.CheckpointIntervalMultiplier
	}
	return 0
}

type isCreateReq_AllOptions_FilterOptions_Filter interface {
	isCreateReq_AllOptions_FilterOptions_Filter()
}

type CreateReq_AllOptions_FilterOptions_StreamIdentifier struct {
	StreamIdentifier *CreateReq_AllOptions_FilterOptions_Expression `protobuf:"bytes,1,opt,name=stream_identifier,json=streamIdentifier,proto3,oneof"`
}

type CreateReq_AllOptions_FilterOptions_EventType struct {
	EventType *CreateReq_AllOptions_FilterOptions_Expression `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3,oneof"`
}

func (*CreateReq_AllOptions_FilterOptions_StreamIdentifier) isCreateReq_AllOptions_FilterOptions_Filter() {
}

func (*CreateReq_AllOptions_FilterOptions_EventType) isCreateReq_AllOptions_FilterOptions_Filter() {}

type isCreateReq_AllOptions_FilterOptions_Window interface {
	isCreateReq_AllOptions_FilterOptions_Window()
}

type CreateReq_AllOptions_FilterOptions_Max struct {
	Max uint32 `protobuf:"varint,3,opt,name=max,proto3,oneof"`
}

type CreateReq_AllOptions_FilterOptions_Count struct {
	Count *shared.Empty `protobuf:"bytes,4,opt,name=count,proto3,oneof"`
}

func (*CreateReq_AllOptions_FilterOptions_Max) isCreateReq_AllOptions_FilterOptions_Window() {}

func (*CreateReq_AllOptions_FilterOptions_Count) isCreateReq_AllOptions_FilterOptions_Window() {}

type CreateReq_AllOptions_FilterOptions_Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regex  string   `protobuf:"bytes,1,opt,name=regex,proto3" json:"regex,omitempty"`
	Prefix []string `protobuf:"bytes,2,rep,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *CreateReq_AllOptions_FilterOptions_Expression) Reset() {
	*x = CreateReq_AllOptions_FilterOptions_Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReq_AllOptions_FilterOptions_Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReq_AllOptions_FilterOptions_Expression) ProtoMessage() {}

func (x *CreateReq_AllOptions_FilterOptions_Expression) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReq_AllOptions_FilterOptions_Expression.ProtoReflect.Descriptor instead.
func (*CreateReq_AllOptions_FilterOptions_Expression) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{2, 2, 0, 0}
}

func (x *CreateReq_AllOptions_FilterOptions_Expression) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *CreateReq_AllOptions_FilterOptions_Expression) GetPrefix() []string {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type UpdateReq_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StreamOption:
	//	*UpdateReq_Options_Stream
	//	*UpdateReq_Options_All
	StreamOption isUpdateReq_Options_StreamOption `protobuf_oneof:"stream_option"`
	// Deprecated: Do not use.
	StreamIdentifier *shared.StreamIdentifier `protobuf:"bytes,1,opt,name=stream_identifier,json=streamIdentifier,proto3" json:"stream_identifier,omitempty"`
	GroupName        string                   `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Settings         *UpdateReq_Settings      `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UpdateReq_Options) Reset() {
	*x = UpdateReq_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReq_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReq_Options) ProtoMessage() {}

func (x *UpdateReq_Options) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReq_Options.ProtoReflect.Descriptor instead.
func (*UpdateReq_Options) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{4, 0}
}

func (m *UpdateReq_Options) GetStreamOption() isUpdateReq_Options_StreamOption {
	if m != nil {
		return m.StreamOption
	}
	return nil
}

func (x *UpdateReq_Options) GetStream() *UpdateReq_StreamOptions {
	if x, ok := x.GetStreamOption().(*UpdateReq_Options_Stream); ok {
		return x.Stream
	}
	return nil
}

func (x *UpdateReq_Options) GetAll() *UpdateReq_AllOptions {
	if x, ok := x.GetStreamOption().(*UpdateReq_Options_All); ok {
		return x.All
	}
	return nil
}

// Deprecated: Do not use.
func (x *UpdateReq_Options) GetStreamIdentifier() *shared.StreamIdentifier {
	if x != nil {
		return x.StreamIdentifier
	}
	return nil
}

func (x *UpdateReq_Options) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *UpdateReq_Options) GetSettings() *UpdateReq_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type isUpdateReq_Options_StreamOption interface {
	isUpdateReq_Options_StreamOption()
}

type UpdateReq_Options_Stream struct {
	Stream *UpdateReq_StreamOptions `protobuf:"bytes,4,opt,name=stream,proto3,oneof"`
}

type UpdateReq_Options_All struct {
	All *UpdateReq_AllOptions `protobuf:"bytes,5,opt,name=all,proto3,oneof"`
}

func (*UpdateReq_Options_Stream) isUpdateReq_Options_StreamOption() {}

func (*UpdateReq_Options_All) isUpdateReq_Options_StreamOption() {}

type UpdateReq_StreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamIdentifier *shared.StreamIdentifier `protobuf:"bytes,1,opt,name=stream_identifier,json=streamIdentifier,proto3" json:"stream_identifier,omitempty"`
	// Types that are assignable to RevisionOption:
	//	*UpdateReq_StreamOptions_Revision
	//	*UpdateReq_StreamOptions_Start
	//	*UpdateReq_StreamOptions_End
	RevisionOption isUpdateReq_StreamOptions_RevisionOption `protobuf_oneof:"revision_option"`
}

func (x *UpdateReq_StreamOptions) Reset() {
	*x = UpdateReq_StreamOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReq_StreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReq_StreamOptions) ProtoMessage() {}

func (x *UpdateReq_StreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReq_StreamOptions.ProtoReflect.Descriptor instead.
func (*UpdateReq_StreamOptions) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{4, 1}
}

func (x *UpdateReq_StreamOptions) GetStreamIdentifier() *shared.StreamIdentifier {
	if x != nil {
		return x.StreamIdentifier
	}
	return nil
}

func (m *UpdateReq_StreamOptions) GetRevisionOption() isUpdateReq_StreamOptions_RevisionOption {
	if m != nil {
		return m.RevisionOption
	}
	return nil
}

func (x *UpdateReq_StreamOptions) GetRevision() uint64 {
	if x, ok := x.GetRevisionOption().(*UpdateReq_StreamOptions_Revision); ok {
		return x.Revision
	}
	return 0
}

func (x *UpdateReq_StreamOptions) GetStart() *shared.Empty {
	if x, ok := x.GetRevisionOption().(*UpdateReq_StreamOptions_Start); ok {
		return x.Start
	}
	return nil
}

func (x *UpdateReq_StreamOptions) GetEnd() *shared.Empty {
	if x, ok := x.GetRevisionOption().(*UpdateReq_StreamOptions_End); ok {
		return x.End
	}
	return nil
}

type isUpdateReq_StreamOptions_RevisionOption interface {
	isUpdateReq_StreamOptions_RevisionOption()
}

type UpdateReq_StreamOptions_Revision struct {
	Revision uint64 `protobuf:"varint,2,opt,name=revision,proto3,oneof"`
}

type UpdateReq_StreamOptions_Start struct {
	Start *shared.Empty `protobuf:"bytes,3,opt,name=start,proto3,oneof"`
}

type UpdateReq_StreamOptions_End struct {
	End *shared.Empty `protobuf:"bytes,4,opt,name=end,proto3,oneof"`
}

func (*UpdateReq_StreamOptions_Revision) isUpdateReq_StreamOptions_RevisionOption() {}

func (*UpdateReq_StreamOptions_Start) isUpdateReq_StreamOptions_RevisionOption() {}

func (*UpdateReq_StreamOptions_End) isUpdateReq_StreamOptions_RevisionOption() {}

type UpdateReq_AllOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AllOption:
	//	*UpdateReq_AllOptions_Position
	//	*UpdateReq_AllOptions_Start
	//	*UpdateReq_AllOptions_End
	AllOption isUpdateReq_AllOptions_AllOption `protobuf_oneof:"all_option"`
}

func (x *UpdateReq_AllOptions) Reset() {
	*x = UpdateReq_AllOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReq_AllOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReq_AllOptions) ProtoMessage() {}

func (x *UpdateReq_AllOptions) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReq_AllOptions.ProtoReflect.Descriptor instead.
func (*UpdateReq_AllOptions) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{4, 2}
}

func (m *UpdateReq_AllOptions) GetAllOption() isUpdateReq_AllOptions_AllOption {
	if m != nil {
		return m.AllOption
	}
	return nil
}

func (x *UpdateReq_AllOptions) GetPosition() *UpdateReq_Position {
	if x, ok := x.GetAllOption().(*UpdateReq_AllOptions_Position); ok {
		return x.Position
	}
	return nil
}

func (x *UpdateReq_AllOptions) GetStart() *shared.Empty {
	if x, ok := x.GetAllOption().(*UpdateReq_AllOptions_Start); ok {
		return x.Start
	}
	return nil
}

func (x *UpdateReq_AllOptions) GetEnd() *shared.Empty {
	if x, ok := x.GetAllOption().(*UpdateReq_AllOptions_End); ok {
		return x.End
	}
	return nil
}

type isUpdateReq_AllOptions_AllOption interface {
	isUpdateReq_AllOptions_AllOption()
}

type UpdateReq_AllOptions_Position struct {
	Position *UpdateReq_Position `protobuf:"bytes,1,opt,name=position,proto3,oneof"`
}

type UpdateReq_AllOptions_Start struct {
	Start *shared.Empty `protobuf:"bytes,2,opt,name=start,proto3,oneof"`
}

type UpdateReq_AllOptions_End struct {
	End *shared.Empty `protobuf:"bytes,3,opt,name=end,proto3,oneof"`
}

func (*UpdateReq_AllOptions_Position) isUpdateReq_AllOptions_AllOption() {}

func (*UpdateReq_AllOptions_Start) isUpdateReq_AllOptions_AllOption() {}

func (*UpdateReq_AllOptions_End) isUpdateReq_AllOptions_AllOption() {}

type UpdateReq_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitPosition  uint64 `protobuf:"varint,1,opt,name=commit_position,json=commitPosition,proto3" json:"commit_position,omitempty"`
	PreparePosition uint64 `protobuf:"varint,2,opt,name=prepare_position,json=preparePosition,proto3" json:"prepare_position,omitempty"`
}

func (x *UpdateReq_Position) Reset() {
	*x = UpdateReq_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReq_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReq_Position) ProtoMessage() {}

func (x *UpdateReq_Position) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReq_Position.ProtoReflect.Descriptor instead.
func (*UpdateReq_Position) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{4, 3}
}

func (x *UpdateReq_Position) GetCommitPosition() uint64 {
	if x != nil {
		return x.CommitPosition
	}
	return 0
}

func (x *UpdateReq_Position) GetPreparePosition() uint64 {
	if x != nil {
		return x.PreparePosition
	}
	return 0
}

type UpdateReq_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolveLinks bool `protobuf:"varint,1,opt,name=resolve_links,json=resolveLinks,proto3" json:"resolve_links,omitempty"`
	// Deprecated: Do not use.
	Revision              uint64                     `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	ExtraStatistics       bool                       `protobuf:"varint,3,opt,name=extra_statistics,json=extraStatistics,proto3" json:"extra_statistics,omitempty"`
	MaxRetryCount         int32                      `protobuf:"varint,5,opt,name=max_retry_count,json=maxRetryCount,proto3" json:"max_retry_count,omitempty"`
	MinCheckpointCount    int32                      `protobuf:"varint,7,opt,name=min_checkpoint_count,json=minCheckpointCount,proto3" json:"min_checkpoint_count,omitempty"`
	MaxCheckpointCount    int32                      `protobuf:"varint,8,opt,name=max_checkpoint_count,json=maxCheckpointCount,proto3" json:"max_checkpoint_count,omitempty"`
	MaxSubscriberCount    int32                      `protobuf:"varint,9,opt,name=max_subscriber_count,json=maxSubscriberCount,proto3" json:"max_subscriber_count,omitempty"`
	LiveBufferSize        int32                      `protobuf:"varint,10,opt,name=live_buffer_size,json=liveBufferSize,proto3" json:"live_buffer_size,omitempty"`
	ReadBatchSize         int32                      `protobuf:"varint,11,opt,name=read_batch_size,json=readBatchSize,proto3" json:"read_batch_size,omitempty"`
	HistoryBufferSize     int32                      `protobuf:"varint,12,opt,name=history_buffer_size,json=historyBufferSize,proto3" json:"history_buffer_size,omitempty"`
	NamedConsumerStrategy UpdateReq_ConsumerStrategy `protobuf:"varint,13,opt,name=named_consumer_strategy,json=namedConsumerStrategy,proto3,enum=event_store.client.persistent_subscriptions.UpdateReq_ConsumerStrategy" json:"named_consumer_strategy,omitempty"`
	// Types that are assignable to MessageTimeout:
	//	*UpdateReq_Settings_MessageTimeoutTicks
	//	*UpdateReq_Settings_MessageTimeoutMs
	MessageTimeout isUpdateReq_Settings_MessageTimeout `protobuf_oneof:"message_timeout"`
	// Types that are assignable to CheckpointAfter:
	//	*UpdateReq_Settings_CheckpointAfterTicks
	//	*UpdateReq_Settings_CheckpointAfterMs
	CheckpointAfter isUpdateReq_Settings_CheckpointAfter `protobuf_oneof:"checkpoint_after"`
}

func (x *UpdateReq_Settings) Reset() {
	*x = UpdateReq_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReq_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReq_Settings) ProtoMessage() {}

func (x *UpdateReq_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReq_Settings.ProtoReflect.Descriptor instead.
func (*UpdateReq_Settings) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{4, 4}
}

func (x *UpdateReq_Settings) GetResolveLinks() bool {
	if x != nil {
		return x.ResolveLinks
	}
	return false
}

// Deprecated: Do not use.
func (x *UpdateReq_Settings) GetRevision() uint64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *UpdateReq_Settings) GetExtraStatistics() bool {
	if x != nil {
		return x.ExtraStatistics
	}
	return false
}

func (x *UpdateReq_Settings) GetMaxRetryCount() int32 {
	if x != nil {
		return x.MaxRetryCount
	}
	return 0
}

func (x *UpdateReq_Settings) GetMinCheckpointCount() int32 {
	if x != nil {
		return x.MinCheckpointCount
	}
	return 0
}

func (x *UpdateReq_Settings) GetMaxCheckpointCount() int32 {
	if x != nil {
		return x.MaxCheckpointCount
	}
	return 0
}

func (x *UpdateReq_Settings) GetMaxSubscriberCount() int32 {
	if x != nil {
		return x.MaxSubscriberCount
	}
	return 0
}

func (x *UpdateReq_Settings) GetLiveBufferSize() int32 {
	if x != nil {
		return x.LiveBufferSize
	}
	return 0
}

func (x *UpdateReq_Settings) GetReadBatchSize() int32 {
	if x != nil {
		return x.ReadBatchSize
	}
	return 0
}

func (x *UpdateReq_Settings) GetHistoryBufferSize() int32 {
	if x != nil {
		return x.HistoryBufferSize
	}
	return 0
}

func (x *UpdateReq_Settings) GetNamedConsumerStrategy() UpdateReq_ConsumerStrategy {
	if x != nil {
		return x.NamedConsumerStrategy
	}
	return UpdateReq_DispatchToSingle
}

func (m *UpdateReq_Settings) GetMessageTimeout() isUpdateReq_Settings_MessageTimeout {
	if m != nil {
		return m.MessageTimeout
	}
	return nil
}

func (x *UpdateReq_Settings) GetMessageTimeoutTicks() int64 {
	if x, ok := x.GetMessageTimeout().(*UpdateReq_Settings_MessageTimeoutTicks); ok {
		return x.MessageTimeoutTicks
	}
	return 0
}

func (x *UpdateReq_Settings) GetMessageTimeoutMs() int32 {
	if x, ok := x.GetMessageTimeout().(*UpdateReq_Settings_MessageTimeoutMs); ok {
		return x.MessageTimeoutMs
	}
	return 0
}

func (m *UpdateReq_Settings) GetCheckpointAfter() isUpdateReq_Settings_CheckpointAfter {
	if m != nil {
		return m.CheckpointAfter
	}
	return nil
}

func (x *UpdateReq_Settings) GetCheckpointAfterTicks() int64 {
	if x, ok := x.GetCheckpointAfter().(*UpdateReq_Settings_CheckpointAfterTicks); ok {
		return x.CheckpointAfterTicks
	}
	return 0
}

func (x *UpdateReq_Settings) GetCheckpointAfterMs() int32 {
	if x, ok := x.GetCheckpointAfter().(*UpdateReq_Settings_CheckpointAfterMs); ok {
		return x.CheckpointAfterMs
	}
	return 0
}

type isUpdateReq_Settings_MessageTimeout interface {
	isUpdateReq_Settings_MessageTimeout()
}

type UpdateReq_Settings_MessageTimeoutTicks struct {
	MessageTimeoutTicks int64 `protobuf:"varint,4,opt,name=message_timeout_ticks,json=messageTimeoutTicks,proto3,oneof"`
}

type UpdateReq_Settings_MessageTimeoutMs struct {
	MessageTimeoutMs int32 `protobuf:"varint,14,opt,name=message_timeout_ms,json=messageTimeoutMs,proto3,oneof"`
}

func (*UpdateReq_Settings_MessageTimeoutTicks) isUpdateReq_Settings_MessageTimeout() {}

func (*UpdateReq_Settings_MessageTimeoutMs) isUpdateReq_Settings_MessageTimeout() {}

type isUpdateReq_Settings_CheckpointAfter interface {
	isUpdateReq_Settings_CheckpointAfter()
}

type UpdateReq_Settings_CheckpointAfterTicks struct {
	CheckpointAfterTicks int64 `protobuf:"varint,6,opt,name=checkpoint_after_ticks,json=checkpointAfterTicks,proto3,oneof"`
}

type UpdateReq_Settings_CheckpointAfterMs struct {
	CheckpointAfterMs int32 `protobuf:"varint,15,opt,name=checkpoint_after_ms,json=checkpointAfterMs,proto3,oneof"`
}

func (*UpdateReq_Settings_CheckpointAfterTicks) isUpdateReq_Settings_CheckpointAfter() {}

func (*UpdateReq_Settings_CheckpointAfterMs) isUpdateReq_Settings_CheckpointAfter() {}

type DeleteReq_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StreamOption:
	//	*DeleteReq_Options_StreamIdentifier
	//	*DeleteReq_Options_All
	StreamOption isDeleteReq_Options_StreamOption `protobuf_oneof:"stream_option"`
	GroupName    string                           `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (x *DeleteReq_Options) Reset() {
	*x = DeleteReq_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReq_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReq_Options) ProtoMessage() {}

func (x *DeleteReq_Options) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReq_Options.ProtoReflect.Descriptor instead.
func (*DeleteReq_Options) Descriptor() ([]byte, []int) {
	return file_persistent_proto_rawDescGZIP(), []int{6, 0}
}

func (m *DeleteReq_Options) GetStreamOption() isDeleteReq_Options_StreamOption {
	if m != nil {
		return m.StreamOption
	}
	return nil
}

func (x *DeleteReq_Options) GetStreamIdentifier() *shared.StreamIdentifier {
	if x, ok := x.GetStreamOption().(*DeleteReq_Options_StreamIdentifier); ok {
		return x.StreamIdentifier
	}
	return nil
}

func (x *DeleteReq_Options) GetAll() *shared.Empty {
	if x, ok := x.GetStreamOption().(*DeleteReq_Options_All); ok {
		return x.All
	}
	return nil
}

func (x *DeleteReq_Options) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type isDeleteReq_Options_StreamOption interface {
	isDeleteReq_Options_StreamOption()
}

type DeleteReq_Options_StreamIdentifier struct {
	StreamIdentifier *shared.StreamIdentifier `protobuf:"bytes,1,opt,name=stream_identifier,json=streamIdentifier,proto3,oneof"`
}

type DeleteReq_Options_All struct {
	All *shared.Empty `protobuf:"bytes,3,opt,name=all,proto3,oneof"`
}

func (*DeleteReq_Options_StreamIdentifier) isDeleteReq_Options_StreamOption() {}

func (*DeleteReq_Options_All) isDeleteReq_Options_StreamOption() {}

var File_persistent_proto protoreflect.FileDescriptor

var file_persistent_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x2b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x08,
	0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x58, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63,
	0x6b, 0x12, 0x4f, 0x0a, 0x04, 0x6e, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x4e, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x63, 0x6b, 0x1a, 0xf0, 0x03, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a,
	0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x03, 0x61, 0x6c,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x68, 0x0a, 0x0b, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x75, 0x75, 0x69, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x97, 0x01, 0x0a, 0x0a, 0x55,
	0x55, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x48, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a,
	0xfb, 0x01, 0x0a, 0x04, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x58, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x2e, 0x4e, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3e, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x72, 0x6b, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6b, 0x69,
	0x70, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x04, 0x42, 0x09, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x98, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x8d,
	0x01, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd2,
	0x07, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x61, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x29, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0b, 0x6e, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x6e, 0x6f, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x01, 0x52, 0x0c, 0x6e, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x8a, 0x04, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x43, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xa1, 0x15, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x58, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xab, 0x03, 0x0a, 0x07,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x55, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6c, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x5c,
	0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8a, 0x02, 0x0a, 0x0d, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa3, 0x07, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x69, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6c, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x01, 0x52, 0x08, 0x6e, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0xfa, 0x03, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x7b,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6c, 0x6c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x38, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a, 0x3a, 0x0a,
	0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x0c, 0x0a,
	0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5e, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb2, 0x06, 0x0a,
	0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1e,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x7f, 0x0a, 0x17, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x15, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x12, 0x36, 0x0a, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x22, 0x44, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x22, 0x0c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0xe7, 0x0f, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x58, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xab, 0x03,
	0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x55, 0x0a, 0x03, 0x61, 0x6c, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x41,
	0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c,
	0x12, 0x5c, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8a, 0x02, 0x0a, 0x0d,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a,
	0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x34, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe9, 0x01, 0x0a, 0x0a, 0x41, 0x6c, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x34, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5e, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb2, 0x06, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x7f, 0x0a, 0x17, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x47, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x15, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x14, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x4d, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69,
	0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x22,
	0x0c, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0xb3, 0x02,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x58, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xcb, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x5a, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x03, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x32, 0x83, 0x04, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x79, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x37, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x79, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x37, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x79, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x36, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x37, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x77,
	0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x34, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01, 0x42, 0x75, 0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x62, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x47, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_persistent_proto_rawDescOnce sync.Once
	file_persistent_proto_rawDescData = file_persistent_proto_rawDesc
)

func file_persistent_proto_rawDescGZIP() []byte {
	file_persistent_proto_rawDescOnce.Do(func() {
		file_persistent_proto_rawDescData = protoimpl.X.CompressGZIP(file_persistent_proto_rawDescData)
	})
	return file_persistent_proto_rawDescData
}

var file_persistent_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_persistent_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_persistent_proto_goTypes = []interface{}{
	(ReadReq_Nack_Action)(0),                              // 0: event_store.client.persistent_subscriptions.ReadReq.Nack.Action
	(CreateReq_ConsumerStrategy)(0),                       // 1: event_store.client.persistent_subscriptions.CreateReq.ConsumerStrategy
	(UpdateReq_ConsumerStrategy)(0),                       // 2: event_store.client.persistent_subscriptions.UpdateReq.ConsumerStrategy
	(*ReadReq)(nil),                                       // 3: event_store.client.persistent_subscriptions.ReadReq
	(*ReadResp)(nil),                                      // 4: event_store.client.persistent_subscriptions.ReadResp
	(*CreateReq)(nil),                                     // 5: event_store.client.persistent_subscriptions.CreateReq
	(*CreateResp)(nil),                                    // 6: event_store.client.persistent_subscriptions.CreateResp
	(*UpdateReq)(nil),                                     // 7: event_store.client.persistent_subscriptions.UpdateReq
	(*UpdateResp)(nil),                                    // 8: event_store.client.persistent_subscriptions.UpdateResp
	(*DeleteReq)(nil),                                     // 9: event_store.client.persistent_subscriptions.DeleteReq
	(*DeleteResp)(nil),                                    // 10: event_store.client.persistent_subscriptions.DeleteResp
	(*ReadReq_Options)(nil),                               // 11: event_store.client.persistent_subscriptions.ReadReq.Options
	(*ReadReq_Ack)(nil),                                   // 12: event_store.client.persistent_subscriptions.ReadReq.Ack
	(*ReadReq_Nack)(nil),                                  // 13: event_store.client.persistent_subscriptions.ReadReq.Nack
	(*ReadReq_Options_UUIDOption)(nil),                    // 14: event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption
	(*ReadResp_ReadEvent)(nil),                            // 15: event_store.client.persistent_subscriptions.ReadResp.ReadEvent
	(*ReadResp_SubscriptionConfirmation)(nil),             // 16: event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation
	(*ReadResp_ReadEvent_RecordedEvent)(nil),              // 17: event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent
	nil,                                                   // 18: event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.MetadataEntry
	(*CreateReq_Options)(nil),                             // 19: event_store.client.persistent_subscriptions.CreateReq.Options
	(*CreateReq_StreamOptions)(nil),                       // 20: event_store.client.persistent_subscriptions.CreateReq.StreamOptions
	(*CreateReq_AllOptions)(nil),                          // 21: event_store.client.persistent_subscriptions.CreateReq.AllOptions
	(*CreateReq_Position)(nil),                            // 22: event_store.client.persistent_subscriptions.CreateReq.Position
	(*CreateReq_Settings)(nil),                            // 23: event_store.client.persistent_subscriptions.CreateReq.Settings
	(*CreateReq_AllOptions_FilterOptions)(nil),            // 24: event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions
	(*CreateReq_AllOptions_FilterOptions_Expression)(nil), // 25: event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression
	(*UpdateReq_Options)(nil),                             // 26: event_store.client.persistent_subscriptions.UpdateReq.Options
	(*UpdateReq_StreamOptions)(nil),                       // 27: event_store.client.persistent_subscriptions.UpdateReq.StreamOptions
	(*UpdateReq_AllOptions)(nil),                          // 28: event_store.client.persistent_subscriptions.UpdateReq.AllOptions
	(*UpdateReq_Position)(nil),                            // 29: event_store.client.persistent_subscriptions.UpdateReq.Position
	(*UpdateReq_Settings)(nil),                            // 30: event_store.client.persistent_subscriptions.UpdateReq.Settings
	(*DeleteReq_Options)(nil),                             // 31: event_store.client.persistent_subscriptions.DeleteReq.Options
	(*shared.StreamIdentifier)(nil),                       // 32: event_store.client.shared.StreamIdentifier
	(*shared.Empty)(nil),                                  // 33: event_store.client.shared.Empty
	(*shared.UUID)(nil),                                   // 34: event_store.client.shared.UUID
}
var file_persistent_proto_depIdxs = []int32{
	11, // 0: event_store.client.persistent_subscriptions.ReadReq.options:type_name -> event_store.client.persistent_subscriptions.ReadReq.Options
	12, // 1: event_store.client.persistent_subscriptions.ReadReq.ack:type_name -> event_store.client.persistent_subscriptions.ReadReq.Ack
	13, // 2: event_store.client.persistent_subscriptions.ReadReq.nack:type_name -> event_store.client.persistent_subscriptions.ReadReq.Nack
	15, // 3: event_store.client.persistent_subscriptions.ReadResp.event:type_name -> event_store.client.persistent_subscriptions.ReadResp.ReadEvent
	16, // 4: event_store.client.persistent_subscriptions.ReadResp.subscription_confirmation:type_name -> event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation
	19, // 5: event_store.client.persistent_subscriptions.CreateReq.options:type_name -> event_store.client.persistent_subscriptions.CreateReq.Options
	26, // 6: event_store.client.persistent_subscriptions.UpdateReq.options:type_name -> event_store.client.persistent_subscriptions.UpdateReq.Options
	31, // 7: event_store.client.persistent_subscriptions.DeleteReq.options:type_name -> event_store.client.persistent_subscriptions.DeleteReq.Options
	32, // 8: event_store.client.persistent_subscriptions.ReadReq.Options.stream_identifier:type_name -> event_store.client.shared.StreamIdentifier
	33, // 9: event_store.client.persistent_subscriptions.ReadReq.Options.all:type_name -> event_store.client.shared.Empty
	14, // 10: event_store.client.persistent_subscriptions.ReadReq.Options.uuid_option:type_name -> event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption
	34, // 11: event_store.client.persistent_subscriptions.ReadReq.Ack.ids:type_name -> event_store.client.shared.UUID
	34, // 12: event_store.client.persistent_subscriptions.ReadReq.Nack.ids:type_name -> event_store.client.shared.UUID
	0,  // 13: event_store.client.persistent_subscriptions.ReadReq.Nack.action:type_name -> event_store.client.persistent_subscriptions.ReadReq.Nack.Action
	33, // 14: event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.structured:type_name -> event_store.client.shared.Empty
	33, // 15: event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.string:type_name -> event_store.client.shared.Empty
	17, // 16: event_store.client.persistent_subscriptions.ReadResp.ReadEvent.event:type_name -> event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent
	17, // 17: event_store.client.persistent_subscriptions.ReadResp.ReadEvent.link:type_name -> event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent
	33, // 18: event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_position:type_name -> event_store.client.shared.Empty
	33, // 19: event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_retry_count:type_name -> event_store.client.shared.Empty
	34, // 20: event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.id:type_name -> event_store.client.shared.UUID
	32, // 21: event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.stream_identifier:type_name -> event_store.client.shared.StreamIdentifier
	18, // 22: event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.metadata:type_name -> event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.MetadataEntry
	20, // 23: event_store.client.persistent_subscriptions.CreateReq.Options.stream:type_name -> event_store.client.persistent_subscriptions.CreateReq.StreamOptions
	21, // 24: event_store.client.persistent_subscriptions.CreateReq.Options.all:type_name -> event_store.client.persistent_subscriptions.CreateReq.AllOptions
	32, // 25: event_store.client.persistent_subscriptions.CreateReq.Options.stream_identifier:type_name -> event_store.client.shared.StreamIdentifier
	23, // 26: event_store.client.persistent_subscriptions.CreateReq.Options.settings:type_name -> event_store.client.persistent_subscriptions.CreateReq.Settings
	32, // 27: event_store.client.persistent_subscriptions.CreateReq.StreamOptions.stream_identifier:type_name -> event_store.client.shared.StreamIdentifier
	33, // 28: event_store.client.persistent_subscriptions.CreateReq.StreamOptions.start:type_name -> event_store.client.shared.Empty
	33, // 29: event_store.client.persistent_subscriptions.CreateReq.StreamOptions.end:type_name -> event_store.client.shared.Empty
	22, // 30: event_store.client.persistent_subscriptions.CreateReq.AllOptions.position:type_name -> event_store.client.persistent_subscriptions.CreateReq.Position
	33, // 31: event_store.client.persistent_subscriptions.CreateReq.AllOptions.start:type_name -> event_store.client.shared.Empty
	33, // 32: event_store.client.persistent_subscriptions.CreateReq.AllOptions.end:type_name -> event_store.client.shared.Empty
	24, // 33: event_store.client.persistent_subscriptions.CreateReq.AllOptions.filter:type_name -> event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions
	33, // 34: event_store.client.persistent_subscriptions.CreateReq.AllOptions.no_filter:type_name -> event_store.client.shared.Empty
	1,  // 35: event_store.client.persistent_subscriptions.CreateReq.Settings.named_consumer_strategy:type_name -> event_store.client.persistent_subscriptions.CreateReq.ConsumerStrategy
	25, // 36: event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.stream_identifier:type_name -> event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression
	25, // 37: event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.event_type:type_name -> event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression
	33, // 38: event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.count:type_name -> event_store.client.shared.Empty
	27, // 39: event_store.client.persistent_subscriptions.UpdateReq.Options.stream:type_name -> event_store.client.persistent_subscriptions.UpdateReq.StreamOptions
	28, // 40: event_store.client.persistent_subscriptions.UpdateReq.Options.all:type_name -> event_store.client.persistent_subscriptions.UpdateReq.AllOptions
	32, // 41: event_store.client.persistent_subscriptions.UpdateReq.Options.stream_identifier:type_name -> event_store.client.shared.StreamIdentifier
	30, // 42: event_store.client.persistent_subscriptions.UpdateReq.Options.settings:type_name -> event_store.client.persistent_subscriptions.UpdateReq.Settings
	32, // 43: event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.stream_identifier:type_name -> event_store.client.shared.StreamIdentifier
	33, // 44: event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.start:type_name -> event_store.client.shared.Empty
	33, // 45: event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.end:type_name -> event_store.client.shared.Empty
	29, // 46: event_store.client.persistent_subscriptions.UpdateReq.AllOptions.position:type_name -> event_store.client.persistent_subscriptions.UpdateReq.Position
	33, // 47: event_store.client.persistent_subscriptions.UpdateReq.AllOptions.start:type_name -> event_store.client.shared.Empty
	33, // 48: event_store.client.persistent_subscriptions.UpdateReq.AllOptions.end:type_name -> event_store.client.shared.Empty
	2,  // 49: event_store.client.persistent_subscriptions.UpdateReq.Settings.named_consumer_strategy:type_name -> event_store.client.persistent_subscriptions.UpdateReq.ConsumerStrategy
	32, // 50: event_store.client.persistent_subscriptions.DeleteReq.Options.stream_identifier:type_name -> event_store.client.shared.StreamIdentifier
	33, // 51: event_store.client.persistent_subscriptions.DeleteReq.Options.all:type_name -> event_store.client.shared.Empty
	5,  // 52: event_store.client.persistent_subscriptions.PersistentSubscriptions.Create:input_type -> event_store.client.persistent_subscriptions.CreateReq
	7,  // 53: event_store.client.persistent_subscriptions.PersistentSubscriptions.Update:input_type -> event_store.client.persistent_subscriptions.UpdateReq
	9,  // 54: event_store.client.persistent_subscriptions.PersistentSubscriptions.Delete:input_type -> event_store.client.persistent_subscriptions.DeleteReq
	3,  // 55: event_store.client.persistent_subscriptions.PersistentSubscriptions.Read:input_type -> event_store.client.persistent_subscriptions.ReadReq
	6,  // 56: event_store.client.persistent_subscriptions.PersistentSubscriptions.Create:output_type -> event_store.client.persistent_subscriptions.CreateResp
	8,  // 57: event_store.client.persistent_subscriptions.PersistentSubscriptions.Update:output_type -> event_store.client.persistent_subscriptions.UpdateResp
	10, // 58: event_store.client.persistent_subscriptions.PersistentSubscriptions.Delete:output_type -> event_store.client.persistent_subscriptions.DeleteResp
	4,  // 59: event_store.client.persistent_subscriptions.PersistentSubscriptions.Read:output_type -> event_store.client.persistent_subscriptions.ReadResp
	56, // [56:60] is the sub-list for method output_type
	52, // [52:56] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_persistent_proto_init() }
func file_persistent_proto_init() {
	if File_persistent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_persistent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReq_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReq_Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReq_Nack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReq_Options_UUIDOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResp_ReadEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResp_SubscriptionConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResp_ReadEvent_RecordedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReq_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReq_StreamOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReq_AllOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReq_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReq_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReq_AllOptions_FilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReq_AllOptions_FilterOptions_Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReq_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReq_StreamOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReq_AllOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReq_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReq_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReq_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_persistent_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ReadReq_Options_)(nil),
		(*ReadReq_Ack_)(nil),
		(*ReadReq_Nack_)(nil),
	}
	file_persistent_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ReadResp_Event)(nil),
		(*ReadResp_SubscriptionConfirmation_)(nil),
	}
	file_persistent_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ReadReq_Options_StreamIdentifier)(nil),
		(*ReadReq_Options_All)(nil),
	}
	file_persistent_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ReadReq_Options_UUIDOption_Structured)(nil),
		(*ReadReq_Options_UUIDOption_String_)(nil),
	}
	file_persistent_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ReadResp_ReadEvent_CommitPosition)(nil),
		(*ReadResp_ReadEvent_NoPosition)(nil),
		(*ReadResp_ReadEvent_RetryCount)(nil),
		(*ReadResp_ReadEvent_NoRetryCount)(nil),
	}
	file_persistent_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*CreateReq_Options_Stream)(nil),
		(*CreateReq_Options_All)(nil),
	}
	file_persistent_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*CreateReq_StreamOptions_Revision)(nil),
		(*CreateReq_StreamOptions_Start)(nil),
		(*CreateReq_StreamOptions_End)(nil),
	}
	file_persistent_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*CreateReq_AllOptions_Position)(nil),
		(*CreateReq_AllOptions_Start)(nil),
		(*CreateReq_AllOptions_End)(nil),
		(*CreateReq_AllOptions_Filter)(nil),
		(*CreateReq_AllOptions_NoFilter)(nil),
	}
	file_persistent_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*CreateReq_Settings_MessageTimeoutTicks)(nil),
		(*CreateReq_Settings_MessageTimeoutMs)(nil),
		(*CreateReq_Settings_CheckpointAfterTicks)(nil),
		(*CreateReq_Settings_CheckpointAfterMs)(nil),
	}
	file_persistent_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*CreateReq_AllOptions_FilterOptions_StreamIdentifier)(nil),
		(*CreateReq_AllOptions_FilterOptions_EventType)(nil),
		(*CreateReq_AllOptions_FilterOptions_Max)(nil),
		(*CreateReq_AllOptions_FilterOptions_Count)(nil),
	}
	file_persistent_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*UpdateReq_Options_Stream)(nil),
		(*UpdateReq_Options_All)(nil),
	}
	file_persistent_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*UpdateReq_StreamOptions_Revision)(nil),
		(*UpdateReq_StreamOptions_Start)(nil),
		(*UpdateReq_StreamOptions_End)(nil),
	}
	file_persistent_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*UpdateReq_AllOptions_Position)(nil),
		(*UpdateReq_AllOptions_Start)(nil),
		(*UpdateReq_AllOptions_End)(nil),
	}
	file_persistent_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*UpdateReq_Settings_MessageTimeoutTicks)(nil),
		(*UpdateReq_Settings_MessageTimeoutMs)(nil),
		(*UpdateReq_Settings_CheckpointAfterTicks)(nil),
		(*UpdateReq_Settings_CheckpointAfterMs)(nil),
	}
	file_persistent_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*DeleteReq_Options_StreamIdentifier)(nil),
		(*DeleteReq_Options_All)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_persistent_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_persistent_proto_goTypes,
		DependencyIndexes: file_persistent_proto_depIdxs,
		EnumInfos:         file_persistent_proto_enumTypes,
		MessageInfos:      file_persistent_proto_msgTypes,
	}.Build()
	File_persistent_proto = out.File
	file_persistent_proto_rawDesc = nil
	file_persistent_proto_goTypes = nil
	file_persistent_proto_depIdxs = nil
}
