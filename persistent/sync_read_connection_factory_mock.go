// Code generated by MockGen. DO NOT EDIT.
// Source: sync_read_connection_factory.go

// Package persistent is a generated GoMock package.
package persistent

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSyncReadConnectionFactory is a mock of SyncReadConnectionFactory interface.
type MockSyncReadConnectionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSyncReadConnectionFactoryMockRecorder
}

// MockSyncReadConnectionFactoryMockRecorder is the mock recorder for MockSyncReadConnectionFactory.
type MockSyncReadConnectionFactoryMockRecorder struct {
	mock *MockSyncReadConnectionFactory
}

// NewMockSyncReadConnectionFactory creates a new mock instance.
func NewMockSyncReadConnectionFactory(ctrl *gomock.Controller) *MockSyncReadConnectionFactory {
	mock := &MockSyncReadConnectionFactory{ctrl: ctrl}
	mock.recorder = &MockSyncReadConnectionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncReadConnectionFactory) EXPECT() *MockSyncReadConnectionFactoryMockRecorder {
	return m.recorder
}

// NewSyncReadConnection mocks base method.
func (m *MockSyncReadConnectionFactory) NewSyncReadConnection(client protoClient, subscriptionId string, messageAdapter messageAdapter) SyncReadConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSyncReadConnection", client, subscriptionId, messageAdapter)
	ret0, _ := ret[0].(SyncReadConnection)
	return ret0
}

// NewSyncReadConnection indicates an expected call of NewSyncReadConnection.
func (mr *MockSyncReadConnectionFactoryMockRecorder) NewSyncReadConnection(client, subscriptionId, messageAdapter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSyncReadConnection", reflect.TypeOf((*MockSyncReadConnectionFactory)(nil).NewSyncReadConnection), client, subscriptionId, messageAdapter)
}
