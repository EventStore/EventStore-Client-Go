// Code generated by MockGen. DO NOT EDIT.
// Source: sync_read_connection.go

// Package persistent is a generated GoMock package.
package persistent

import (
	reflect "reflect"

	messages "github.com/EventStore/EventStore-Client-Go/messages"
	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockSyncReadConnection is a mock of SyncReadConnection interface.
type MockSyncReadConnection struct {
	ctrl     *gomock.Controller
	recorder *MockSyncReadConnectionMockRecorder
}

// MockSyncReadConnectionMockRecorder is the mock recorder for MockSyncReadConnection.
type MockSyncReadConnectionMockRecorder struct {
	mock *MockSyncReadConnection
}

// NewMockSyncReadConnection creates a new mock instance.
func NewMockSyncReadConnection(ctrl *gomock.Controller) *MockSyncReadConnection {
	mock := &MockSyncReadConnection{ctrl: ctrl}
	mock.recorder = &MockSyncReadConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncReadConnection) EXPECT() *MockSyncReadConnectionMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockSyncReadConnection) Ack(messageIds ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range messageIds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ack", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockSyncReadConnectionMockRecorder) Ack(messageIds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockSyncReadConnection)(nil).Ack), messageIds...)
}

// Nack mocks base method.
func (m *MockSyncReadConnection) Nack(reason string, action Nack_Action, messageIds ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{reason, action}
	for _, a := range messageIds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Nack", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nack indicates an expected call of Nack.
func (mr *MockSyncReadConnectionMockRecorder) Nack(reason, action interface{}, messageIds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{reason, action}, messageIds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nack", reflect.TypeOf((*MockSyncReadConnection)(nil).Nack), varargs...)
}

// Read mocks base method.
func (m *MockSyncReadConnection) Read() (*messages.RecordedEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(*messages.RecordedEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSyncReadConnectionMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSyncReadConnection)(nil).Read))
}
