// Code generated by MockGen. DO NOT EDIT.
// Source: sync_read_connection.go

// Package persistent is a generated GoMock package.
package persistent

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messages "github.com/pivonroll/EventStore-Client-Go/messages"
	subscription "github.com/pivonroll/EventStore-Client-Go/subscription"
)

// MockSyncReadConnection is a mock of SyncReadConnection interface.
type MockSyncReadConnection struct {
	ctrl     *gomock.Controller
	recorder *MockSyncReadConnectionMockRecorder
}

// MockSyncReadConnectionMockRecorder is the mock recorder for MockSyncReadConnection.
type MockSyncReadConnectionMockRecorder struct {
	mock *MockSyncReadConnection
}

// NewMockSyncReadConnection creates a new mock instance.
func NewMockSyncReadConnection(ctrl *gomock.Controller) *MockSyncReadConnection {
	mock := &MockSyncReadConnection{ctrl: ctrl}
	mock.recorder = &MockSyncReadConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncReadConnection) EXPECT() *MockSyncReadConnectionMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockSyncReadConnection) Ack(msgs ...*messages.ResolvedEvent) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ack", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockSyncReadConnectionMockRecorder) Ack(msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockSyncReadConnection)(nil).Ack), msgs...)
}

// Close mocks base method.
func (m *MockSyncReadConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSyncReadConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSyncReadConnection)(nil).Close))
}

// Nack mocks base method.
func (m *MockSyncReadConnection) Nack(reason string, action Nack_Action, msgs ...*messages.ResolvedEvent) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{reason, action}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Nack", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nack indicates an expected call of Nack.
func (mr *MockSyncReadConnectionMockRecorder) Nack(reason, action interface{}, msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{reason, action}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nack", reflect.TypeOf((*MockSyncReadConnection)(nil).Nack), varargs...)
}

// Recv mocks base method.
func (m *MockSyncReadConnection) Recv() *subscription.SubscriptionEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*subscription.SubscriptionEvent)
	return ret0
}

// Recv indicates an expected call of Recv.
func (mr *MockSyncReadConnectionMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSyncReadConnection)(nil).Recv))
}
