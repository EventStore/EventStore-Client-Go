// Code generated by MockGen. DO NOT EDIT.
// Source: proto_client.go

// Package persistent is a generated GoMock package.
package persistent

import (
	reflect "reflect"

	persistent "github.com/EventStore/EventStore-Client-Go/protos/persistent"
	gomock "github.com/golang/mock/gomock"
)

// MockprotoClient is a mock of protoClient interface.
type MockprotoClient struct {
	ctrl     *gomock.Controller
	recorder *MockprotoClientMockRecorder
}

// MockprotoClientMockRecorder is the mock recorder for MockprotoClient.
type MockprotoClientMockRecorder struct {
	mock *MockprotoClient
}

// NewMockprotoClient creates a new mock instance.
func NewMockprotoClient(ctrl *gomock.Controller) *MockprotoClient {
	mock := &MockprotoClient{ctrl: ctrl}
	mock.recorder = &MockprotoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprotoClient) EXPECT() *MockprotoClientMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockprotoClient) Recv() (*persistent.ReadResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*persistent.ReadResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockprotoClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockprotoClient)(nil).Recv))
}

// Send mocks base method.
func (m *MockprotoClient) Send(req *persistent.ReadReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockprotoClientMockRecorder) Send(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockprotoClient)(nil).Send), req)
}
