// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package persistent is a generated GoMock package.
package persistent

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateAllSubscription mocks base method.
func (m *MockClient) CreateAllSubscription(ctx context.Context, allOptions SubscriptionAllOptionConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAllSubscription", ctx, allOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAllSubscription indicates an expected call of CreateAllSubscription.
func (mr *MockClientMockRecorder) CreateAllSubscription(ctx, allOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAllSubscription", reflect.TypeOf((*MockClient)(nil).CreateAllSubscription), ctx, allOptions)
}

// CreateStreamSubscription mocks base method.
func (m *MockClient) CreateStreamSubscription(ctx context.Context, streamConfig SubscriptionStreamConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamSubscription", ctx, streamConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStreamSubscription indicates an expected call of CreateStreamSubscription.
func (mr *MockClientMockRecorder) CreateStreamSubscription(ctx, streamConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamSubscription", reflect.TypeOf((*MockClient)(nil).CreateStreamSubscription), ctx, streamConfig)
}

// DeleteAllSubscription mocks base method.
func (m *MockClient) DeleteAllSubscription(ctx context.Context, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSubscription", ctx, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllSubscription indicates an expected call of DeleteAllSubscription.
func (mr *MockClientMockRecorder) DeleteAllSubscription(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSubscription", reflect.TypeOf((*MockClient)(nil).DeleteAllSubscription), ctx, groupName)
}

// DeleteStreamSubscription mocks base method.
func (m *MockClient) DeleteStreamSubscription(ctx context.Context, deleteOptions DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamSubscription", ctx, deleteOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStreamSubscription indicates an expected call of DeleteStreamSubscription.
func (mr *MockClientMockRecorder) DeleteStreamSubscription(ctx, deleteOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamSubscription", reflect.TypeOf((*MockClient)(nil).DeleteStreamSubscription), ctx, deleteOptions)
}

// SubscribeToStreamSync mocks base method.
func (m *MockClient) SubscribeToStreamSync(ctx context.Context, bufferSize int32, groupName string, streamName []byte) (SyncReadConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToStreamSync", ctx, bufferSize, groupName, streamName)
	ret0, _ := ret[0].(SyncReadConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToStreamSync indicates an expected call of SubscribeToStreamSync.
func (mr *MockClientMockRecorder) SubscribeToStreamSync(ctx, bufferSize, groupName, streamName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToStreamSync", reflect.TypeOf((*MockClient)(nil).SubscribeToStreamSync), ctx, bufferSize, groupName, streamName)
}

// UpdateAllSubscription mocks base method.
func (m *MockClient) UpdateAllSubscription(ctx context.Context, allOptions SubscriptionUpdateAllOptionConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSubscription", ctx, allOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllSubscription indicates an expected call of UpdateAllSubscription.
func (mr *MockClientMockRecorder) UpdateAllSubscription(ctx, allOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSubscription", reflect.TypeOf((*MockClient)(nil).UpdateAllSubscription), ctx, allOptions)
}

// UpdateStreamSubscription mocks base method.
func (m *MockClient) UpdateStreamSubscription(ctx context.Context, streamConfig SubscriptionStreamConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamSubscription", ctx, streamConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStreamSubscription indicates an expected call of UpdateStreamSubscription.
func (mr *MockClientMockRecorder) UpdateStreamSubscription(ctx, streamConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamSubscription", reflect.TypeOf((*MockClient)(nil).UpdateStreamSubscription), ctx, streamConfig)
}
