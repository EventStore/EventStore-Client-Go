// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package persistent is a generated GoMock package.
package persistent

import (
	context "context"
	reflect "reflect"

	messages "github.com/EventStore/EventStore-Client-Go/messages"
	gomock "github.com/golang/mock/gomock"
)

// MockhandlerTest is a mock of handlerTest interface.
type MockhandlerTest struct {
	ctrl     *gomock.Controller
	recorder *MockhandlerTestMockRecorder
}

// MockhandlerTestMockRecorder is the mock recorder for MockhandlerTest.
type MockhandlerTestMockRecorder struct {
	mock *MockhandlerTest
}

// NewMockhandlerTest creates a new mock instance.
func NewMockhandlerTest(ctrl *gomock.Controller) *MockhandlerTest {
	mock := &MockhandlerTest{ctrl: ctrl}
	mock.recorder = &MockhandlerTestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhandlerTest) EXPECT() *MockhandlerTestMockRecorder {
	return m.recorder
}

// handler mocks base method.
func (m *MockhandlerTest) handler(arg0 context.Context, arg1 messages.RecordedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handler", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// handler indicates an expected call of handler.
func (mr *MockhandlerTestMockRecorder) handler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handler", reflect.TypeOf((*MockhandlerTest)(nil).handler), arg0, arg1)
}
