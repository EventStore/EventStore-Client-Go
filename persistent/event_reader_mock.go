// Code generated by MockGen. DO NOT EDIT.
// Source: event_reader.go

// Package persistent is a generated GoMock package.
package persistent

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errors "github.com/pivonroll/EventStore-Client-Go/errors"
)

// MockEventReader is a mock of EventReader interface.
type MockEventReader struct {
	ctrl     *gomock.Controller
	recorder *MockEventReaderMockRecorder
}

// MockEventReaderMockRecorder is the mock recorder for MockEventReader.
type MockEventReaderMockRecorder struct {
	mock *MockEventReader
}

// NewMockEventReader creates a new mock instance.
func NewMockEventReader(ctrl *gomock.Controller) *MockEventReader {
	mock := &MockEventReader{ctrl: ctrl}
	mock.recorder = &MockEventReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventReader) EXPECT() *MockEventReaderMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockEventReader) Ack(msgs ...ReadResponseEvent) errors.Error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ack", varargs...)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockEventReaderMockRecorder) Ack(msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockEventReader)(nil).Ack), msgs...)
}

// Close mocks base method.
func (m *MockEventReader) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEventReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventReader)(nil).Close))
}

// Nack mocks base method.
func (m *MockEventReader) Nack(reason string, action Nack_Action, msgs ...ReadResponseEvent) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{reason, action}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Nack", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nack indicates an expected call of Nack.
func (mr *MockEventReaderMockRecorder) Nack(reason, action interface{}, msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{reason, action}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nack", reflect.TypeOf((*MockEventReader)(nil).Nack), varargs...)
}

// ReadOne mocks base method.
func (m *MockEventReader) ReadOne() (ReadResponseEvent, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOne")
	ret0, _ := ret[0].(ReadResponseEvent)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ReadOne indicates an expected call of ReadOne.
func (mr *MockEventReaderMockRecorder) ReadOne() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOne", reflect.TypeOf((*MockEventReader)(nil).ReadOne))
}
